void Command(char cmd, unsigned long int arg, char CRCbits)
{
  unsigned char temp;
  WriteSPI(0xff);  //Dummy Byte
  WriteSPI(cmd);
  WriteSPI((unsigned char) (arg >> 24));
  WriteSPI((unsigned char) (arg >> 16));
  WriteSPI((unsigned char) (arg >> 8));
  WriteSPI((unsigned char)  arg);
  WriteSPI(CRCbits);
}

void dummy_clocks(int n)
{
  int i = 0;
  for(i=0;i<n;i++)
  {
  LATB4 = 1; //CS High
  WriteSPI(0XFF); //Dummy Byte
  LATB4 = 0; //CS Low 
  }
}

void proceed()
{
  LATB4 = 0; //CS Low
  WriteSPI(0XFF); // Give Time For SD_CARD To Proceed
  LATB4 = 1; //CS High
}

D card initialisation
 do{
  dummy_clocks(8);  // Initial Clock Pulse
  Command(0X40, 0X00000000, 0X95);
  proceed();  // Generate Bus Clock
  do{  
  buff = response();
  count++;
  }while((buff!=0X01) && (count<10) );
  count = 0;
  }while(buff!=0X01);



 do{
  Command(0X41, 0X00000000, 0X00);
  proceed();  //Generate Bus Clock
  do{
  buff = response();
  count++;
  }while((buff!=0X00) && (count<10));
  count = 0;
  }while(buff!=0x00);


block write

dummy_clocks(8);  
  Command(0X58, 0X00000A00, 0X00);
  proceed();
  do{  
  buff = response();
  }while(buff!=0x00);
  /*CMD 24 Accepted*/
  Delay_s(1);
  
  dummy_clocks(8);
  WriteSPI_(0XFE); //START TOKEN
  for(i=0;i<512;i++) //DATA BLOCK
  {
  WriteSPI_(/*WRITE YOUR DATA BYTE HERE*/);
  i++;
  }
  
  WriteSPI_(0XFF); //CRC
  WriteSPI_(0XFF); //CRC
  
  Delay_s(1);
  dummy_clocks(8);  
  Command(0X4D,0X00000000,0XFF);
  
  proceed();
  do{  
  buff = response();
  }while(buff!=0x00);
  
  /*DATA WRITE OVER*/


read

 do{  
  buff = response();
  }while(buff!=0xFE);
  length = 0;
  LATB4 = 0; // CS is driven low during the read process
  
  while(length<512)
  {
  str[length]=response();  //read buffer (R1) should be 0x01 = idle mode 
  length++;
  }
  length = 0;
  WriteUART_(0XFF); //CRC
  WriteUART_(0XFF); //CRC
  
  Delay_s(1);
  dummy_clocks(8);  
  Command(0X4C,0X00000000,0X00); //COMMAND12. Stop To Read
  proceed();
  do{  
  buff = response();
  }while(buff!=0xFF);



multi write

while(i!=/*number of blocks*/)
  {
  WriteSPI_(0XFC); //START TOKEN
  i++;  
  for(j=0;j<512;j++) //DATA BLOCK
  {
  WriteSPI_(/*your data byte*/);
  j++;
  }
  WriteSPI_(0XFF); // CRC 2 BYTES
  WriteSPI_(0XFF);
  Delay_s(1);
  dummy_clocks(8);
  }

multi read

while(count){
  while ( length < 512 )  
  {
  str[length] = response(); //Repeat with a different array for each count
  rd++;
  length++;  
  }
  count--;
  }