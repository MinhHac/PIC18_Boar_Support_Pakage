

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 13 04:08:15 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     _LATD	set	3980
    78  0000                     _LATEbits	set	3981
    79  0000                     _TRISD	set	3989
    80  0000                     _TRISEbits	set	3990
    81  0000                     _PORTBbits	set	3969
    82  0000                     _T0CONbits	set	4053
    83  0000                     _RCONbits	set	4048
    84  0000                     _ADCON1	set	4033
    85  0000                     _TRISBbits	set	3987
    86  0000                     _TXREG	set	4013
    87  0000                     _TXSTAbits	set	4012
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _SPBRG	set	4015
    91  0000                     _BAUDCONbits	set	4024
    92  0000                     _RCSTA	set	4011
    93  0000                     _TXSTA	set	4012
    94  0000                     _TRISCbits	set	3988
    95  0000                     _RCREG	set	4014
    96  0000                     _RCSTAbits	set	4011
    97  0000                     _PIR1bits	set	3998
    98  0000                     _INTCON2bits	set	4081
    99  0000                     _INTCONbits	set	4082
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _TMR0L	set	4054
   102  0000                     _TMR0H	set	4055
   103  0000                     _T0CON	set	4053
   104  0000                     _LATAbits	set	3977
   105  0000                     _TRISAbits	set	3986
   106                           
   107                           	psect	smallconst
   108  000800                     __psmallconst:
   109                           	opt stack 0
   110  000800  00                 	db	0
   111  000801                     STR_4:
   112  000801  0D                 	db	13
   113  000802  30                 	db	48	;'0'
   114  000803  30                 	db	48	;'0'
   115  000804  3A                 	db	58	;':'
   116  000805  30                 	db	48	;'0'
   117  000806  30                 	db	48	;'0'
   118  000807  00                 	db	0
   119  0000                     
   120                           ; #config settings
   121  000808  00                 	db	0	; dummy byte at the end
   122  0000                     
   123                           	psect	cinit
   124  001146                     __pcinit:
   125                           	opt stack 0
   126  001146                     start_initialization:
   127                           	opt stack 0
   128  001146                     __initialization:
   129                           	opt stack 0
   130                           
   131                           ; Clear objects allocated to BANK0 (3 bytes)
   132  001146  0100               	movlb	0
   133  001148  6B89               	clrf	(__pbssBANK0+2)& (0+255),b
   134  00114A  6B88               	clrf	(__pbssBANK0+1)& (0+255),b
   135  00114C  6B87               	clrf	__pbssBANK0& (0+255),b
   136                           
   137                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   138  00114E  6A45               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   139                           
   140                           ; Clear objects allocated to COMRAM (39 bytes)
   141  001150  EE00  F001         	lfsr	0,__pbssCOMRAM
   142  001154  0E27               	movlw	39
   143  001156                     clear_0:
   144  001156  6AEE               	clrf	postinc0,c
   145  001158  06E8               	decf	wreg,f,c
   146  00115A  E1FD               	bnz	clear_0
   147  00115C                     end_of_initialization:
   148                           	opt stack 0
   149  00115C                     __end_of__initialization:
   150                           	opt stack 0
   151  00115C  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   152  00115E  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   153  001160  0E00               	movlw	low (__Lmediumconst shr (0+16))
   154  001162  6EF8               	movwf	tblptru,c
   155  001164  0100               	movlb	0
   156  001166  EF2C  F006         	goto	_main	;jump to C main() function
   157                           tblptru	equ	0xFF8
   158                           postinc0	equ	0xFEE
   159                           wreg	equ	0xFE8
   160                           
   161                           	psect	bitbssCOMRAM
   162  000228                     __pbitbssCOMRAM:
   163                           	opt stack 0
   164  000228                     _TICK:
   165                           	opt stack 0
   166  000228                     	ds	1
   167                           tblptru	equ	0xFF8
   168                           postinc0	equ	0xFEE
   169                           wreg	equ	0xFE8
   170                           
   171                           	psect	bssCOMRAM
   172  000001                     __pbssCOMRAM:
   173                           	opt stack 0
   174  000001                     _buffer_RX:
   175                           	opt stack 0
   176  000001                     	ds	38
   177  000027                     _index:
   178                           	opt stack 0
   179  000027                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           
   184                           	psect	bssBANK0
   185  000087                     __pbssBANK0:
   186                           	opt stack 0
   187  000087                     main@chrono:
   188                           	opt stack 0
   189  000087                     	ds	2
   190  000089                     _scheduler_ct:
   191                           	opt stack 0
   192  000089                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           postinc0	equ	0xFEE
   195                           wreg	equ	0xFE8
   196                           
   197                           	psect	cstackBANK0
   198  000060                     __pcstackBANK0:
   199                           	opt stack 0
   200  000060                     ??_isr_low:
   201                           
   202                           ; 1 bytes @ 0x0
   203  000060                     	ds	21
   204  000075                     ?___wmul:
   205                           	opt stack 0
   206  000075                     ?___lwdiv:
   207                           	opt stack 0
   208  000075                     ?___lwmod:
   209                           	opt stack 0
   210  000075                     ?___lldiv:
   211                           	opt stack 0
   212  000075                     timer0_init@val:
   213                           	opt stack 0
   214  000075                     uart_puts@str:
   215                           	opt stack 0
   216  000075                     lcd_sendString@str:
   217                           	opt stack 0
   218  000075                     ___wmul@multiplier:
   219                           	opt stack 0
   220  000075                     ___lwdiv@dividend:
   221                           	opt stack 0
   222  000075                     ___lwmod@dividend:
   223                           	opt stack 0
   224  000075                     ___lldiv@dividend:
   225                           	opt stack 0
   226                           
   227                           ; 4 bytes @ 0x15
   228  000075                     	ds	2
   229  000077                     uart_puts@i:
   230                           	opt stack 0
   231  000077                     ___wmul@multiplicand:
   232                           	opt stack 0
   233  000077                     ___lwdiv@divisor:
   234                           	opt stack 0
   235  000077                     ___lwmod@divisor:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x17
   239  000077                     	ds	2
   240  000079                     app_init@chrono:
   241                           	opt stack 0
   242  000079                     task1@chrono:
   243                           	opt stack 0
   244  000079                     task2@chrono:
   245                           	opt stack 0
   246  000079                     task3@chrono:
   247                           	opt stack 0
   248  000079                     ___lldiv@divisor:
   249                           	opt stack 0
   250                           
   251                           ; 4 bytes @ 0x19
   252  000079                     	ds	2
   253  00007B                     ??_task1:
   254  00007B                     ??_task2:
   255                           
   256                           ; 1 bytes @ 0x1B
   257  00007B                     	ds	2
   258  00007D                     ___lldiv@quotient:
   259                           	opt stack 0
   260                           
   261                           ; 4 bytes @ 0x1D
   262  00007D                     	ds	3
   263  000080                     task1@d:
   264                           	opt stack 0
   265  000080                     task2@d:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x20
   269  000080                     	ds	1
   270  000081                     task1@c:
   271                           	opt stack 0
   272  000081                     task2@c:
   273                           	opt stack 0
   274  000081                     ___lldiv@counter:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x21
   278  000081                     	ds	1
   279  000082                     task1@b:
   280                           	opt stack 0
   281  000082                     task2@b:
   282                           	opt stack 0
   283  000082                     uart_init@bdrate:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x22
   287  000082                     	ds	1
   288  000083                     task1@a:
   289                           	opt stack 0
   290  000083                     task2@a:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x23
   294  000083                     	ds	3
   295  000086                     ??_main:
   296                           
   297                           ; 1 bytes @ 0x26
   298  000086                     	ds	1
   299                           tblptru	equ	0xFF8
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           
   303                           	psect	cstackCOMRAM
   304  000028                     __pcstackCOMRAM:
   305                           	opt stack 0
   306  000028                     timer0_reload@count:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x0
   310  000028                     	ds	2
   311  00002A                     ??_timer0_reload:
   312                           
   313                           ; 1 bytes @ 0x2
   314  00002A                     	ds	2
   315  00002C                     timer0_reload@val:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x4
   319  00002C                     	ds	2
   320  00002E                     ??_high_isr:
   321                           
   322                           ; 1 bytes @ 0x6
   323  00002E                     	ds	18
   324  000040                     uart_isr_process@lost:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x18
   328  000040                     	ds	1
   329  000041                     ??_Delay10KTCYx:
   330  000041                     uart_putc@payload:
   331                           	opt stack 0
   332  000041                     Delay10TCYx@unit:
   333                           	opt stack 0
   334  000041                     Delay1KTCYx@unit:
   335                           	opt stack 0
   336  000041                     ___lwdiv@counter:
   337                           	opt stack 0
   338  000041                     ___lwmod@counter:
   339                           	opt stack 0
   340  000041                     timer0_init@count:
   341                           	opt stack 0
   342  000041                     ___wmul@product:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x19
   346  000041                     	ds	1
   347  000042                     ??_uart_puts:
   348  000042                     uart_init@flush:
   349                           	opt stack 0
   350  000042                     lcd_sendCommand@command:
   351                           	opt stack 0
   352  000042                     Delay10KTCYx@unit:
   353                           	opt stack 0
   354  000042                     ___lwdiv@quotient:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x1A
   358  000042                     	ds	1
   359  000043                     ??_timer0_init:
   360  000043                     lcd_sendChar@data:
   361                           	opt stack 0
   362  000043                     uart_init@val:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x1B
   366  000043                     	ds	1
   367  000044                     
   368                           ; 1 bytes @ 0x1C
   369  000044                     	ds	1
   370  000045                     tblptru	equ	0xFF8
   371                           postinc0	equ	0xFEE
   372                           wreg	equ	0xFE8
   373                           
   374                           ; 1 bytes @ 0x1D
   375 ;;
   376 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   377 ;;
   378 ;; *************** function _main *****************
   379 ;; Defined at:
   380 ;;		line 9 in file "../../main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;		None
   383 ;; Auto vars:     Size  Location     Type
   384 ;;		None
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   394 ;;      Params:         0       0       0       0       0       0       0       0       0
   395 ;;      Locals:         0       0       0       0       0       0       0       0       0
   396 ;;      Temps:          0       1       0       0       0       0       0       0       0
   397 ;;      Totals:         0       1       0       0       0       0       0       0       0
   398 ;;Total ram usage:        1 bytes
   399 ;; Hardware stack levels required when called:   10
   400 ;; This function calls:
   401 ;;		_app_init
   402 ;;		_system_init
   403 ;;		_task1
   404 ;;		_task2
   405 ;;		_task3
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text0
   412  000C58                     __ptext0:
   413                           	opt stack 0
   414  000C58                     _main:
   415                           	opt stack 21
   416                           
   417                           ;main.c: 11: TRISAbits.TRISA4 = 0;
   418                           
   419                           ;incstack = 0
   420  000C58  9892               	bcf	3986,4,c	;volatile
   421                           
   422                           ;main.c: 12: LATAbits.LATA4 = 0;
   423  000C5A  9889               	bcf	3977,4,c	;volatile
   424                           
   425                           ;main.c: 14: static chronoHandle *chrono;
   426                           ;main.c: 15: system_init();
   427  000C5C  EC15  F008         	call	_system_init	;wreg free
   428                           
   429                           ;main.c: 16: app_init(chrono);
   430  000C60  C087  F079         	movff	main@chrono,app_init@chrono
   431  000C64  C088  F07A         	movff	main@chrono+1,app_init@chrono+1
   432  000C68  EC2A  F007         	call	_app_init	;wreg free
   433  000C6C                     
   434                           ;main.c: 19: if (TICK) {
   435  000C6C  A045               	btfss	_TICK/(0+8),_TICK& (0+7),c
   436  000C6E  D7FE               	goto	l31
   437                           
   438                           ;main.c: 20: TICK = 0;
   439  000C70  9045               	bcf	_TICK/(0+8),_TICK& (0+7),c
   440                           
   441                           ;main.c: 21: switch (scheduler_ct) {
   442  000C72  D023               	goto	l33
   443  000C74                     
   444                           ;main.c: 23: LATAbits.LATA4 = ~LATAbits.LATA4;
   445  000C74  A889               	btfss	3977,4,c	;volatile
   446  000C76  D002               	goto	u1080
   447  000C78  0E01               	movlw	1
   448  000C7A  D001               	goto	u1086
   449  000C7C                     u1080:
   450  000C7C  0E00               	movlw	0
   451  000C7E                     u1086:
   452  000C7E  0AFF               	xorlw	255
   453  000C80  0100               	movlb	0	; () banked
   454  000C82  6F86               	movwf	??_main& (0+255),b
   455  000C84  3B86               	swapf	??_main& (0+255),f,b
   456  000C86  5089               	movf	3977,w,c	;volatile
   457  000C88  1986               	xorwf	??_main& (0+255),w,b
   458  000C8A  0BEF               	andlw	-17
   459  000C8C  1986               	xorwf	??_main& (0+255),w,b
   460  000C8E  6E89               	movwf	3977,c	;volatile
   461                           
   462                           ; BSR set to: 0
   463                           ;main.c: 24: task1(chrono);
   464  000C90  C087  F079         	movff	main@chrono,task1@chrono
   465  000C94  C088  F07A         	movff	main@chrono+1,task1@chrono+1
   466  000C98  EC05  F004         	call	_task1	;wreg free
   467                           
   468                           ;main.c: 25: break;
   469  000C9C  D019               	goto	l35
   470  000C9E                     
   471                           ;main.c: 28: {
   472                           ;main.c: 29: task2(chrono);
   473  000C9E  C087  F079         	movff	main@chrono,task2@chrono
   474  000CA2  C088  F07A         	movff	main@chrono+1,task2@chrono+1
   475  000CA6  EC2A  F005         	call	_task2	;wreg free
   476                           
   477                           ;main.c: 30: break;
   478  000CAA  D012               	goto	l35
   479  000CAC                     
   480                           ;main.c: 34: {
   481                           ;main.c: 35: task3(chrono);
   482  000CAC  C087  F079         	movff	main@chrono,task3@chrono
   483  000CB0  C088  F07A         	movff	main@chrono+1,task3@chrono+1
   484  000CB4  ECB4  F006         	call	_task3	;wreg free
   485                           
   486                           ;main.c: 37: }
   487                           ;main.c: 39: }
   488                           
   489                           ;main.c: 36: break;
   490  000CB8  D00B               	goto	l35
   491  000CBA                     l33:
   492  000CBA  0100               	movlb	0	; () banked
   493  000CBC  5189               	movf	_scheduler_ct& (0+255),w,b
   494                           
   495                           ; Switch size 1, requested type "space"
   496                           ; Number of cases is 3, Range of values is 0 to 2
   497                           ; switch strategies available:
   498                           ; Name         Instructions Cycles
   499                           ; simple_byte           10     6 (average)
   500                           ;	Chosen strategy is simple_byte
   501  000CBE  0A00               	xorlw	0	; case 0
   502  000CC0  B4D8               	btfsc	status,2,c
   503  000CC2  D7D8               	goto	l34
   504  000CC4  0A01               	xorlw	1	; case 1
   505  000CC6  B4D8               	btfsc	status,2,c
   506  000CC8  D7EA               	goto	l36
   507  000CCA  0A03               	xorlw	3	; case 2
   508  000CCC  B4D8               	btfsc	status,2,c
   509  000CCE  D7EE               	goto	l37
   510  000CD0                     l35:
   511                           
   512                           ;main.c: 40: scheduler_ct++;
   513                           
   514                           ; BSR set to: 0
   515  000CD0  0100               	movlb	0	; () banked
   516  000CD2  2B89               	incf	_scheduler_ct& (0+255),f,b
   517                           
   518                           ; BSR set to: 0
   519                           ;main.c: 41: if (scheduler_ct == 5) scheduler_ct = 0;
   520  000CD4  0E05               	movlw	5
   521  000CD6  1989               	xorwf	_scheduler_ct& (0+255),w,b
   522  000CD8  A4D8               	btfss	status,2,c
   523  000CDA  D7C8               	goto	l31
   524                           
   525                           ; BSR set to: 0
   526  000CDC  0E00               	movlw	0
   527  000CDE  6F89               	movwf	_scheduler_ct& (0+255),b
   528                           
   529                           ; BSR set to: 0
   530                           
   531                           ; BSR set to: 0
   532                           
   533                           ; BSR set to: 0
   534  000CE0  D7C5               	goto	l31
   535                           
   536                           ; BSR set to: 0
   537  000CE2  0003               	sleep		;# 
   538  000CE4                     __end_of_main:
   539                           	opt stack 0
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           status	equ	0xFD8
   544                           
   545 ;; *************** function _task3 *****************
   546 ;; Defined at:
   547 ;;		line 53 in file "task_control.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  chrono          2   25[BANK0 ] PTR struct .
   550 ;;		 -> NULL(0), 
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   562 ;;      Params:         0       2       0       0       0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0       0       0       0       0
   565 ;;      Totals:         0       2       0       0       0       0       0       0       0
   566 ;;Total ram usage:        2 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    9
   569 ;; This function calls:
   570 ;;		_lcd_sendString
   571 ;;		_uart_puts
   572 ;; This function is called by:
   573 ;;		_main
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text1
   578  000D68                     __ptext1:
   579                           	opt stack 0
   580  000D68                     _task3:
   581                           	opt stack 21
   582                           
   583                           ;task_control.c: 54: if (PORTBbits.RB1 == 0) {
   584                           
   585                           ;incstack = 0
   586  000D68  B281               	btfsc	3969,1,c	;volatile
   587  000D6A  D00A               	goto	l237
   588                           
   589                           ;task_control.c: 55: chrono->btn_reset_flag = 0;
   590  000D6C  0100               	movlb	0	; () banked
   591  000D6E  EE20 F002          	lfsr	2,2
   592  000D72  5179               	movf	task3@chrono& (0+255),w,b
   593  000D74  26D9               	addwf	fsr2l,f,c
   594  000D76  517A               	movf	(task3@chrono+1)& (0+255),w,b
   595  000D78  22DA               	addwfc	fsr2h,f,c
   596  000D7A  0E00               	movlw	0
   597  000D7C  6EDF               	movwf	indf2,c
   598                           
   599                           ;task_control.c: 56: } else if (PORTBbits.RB1 == 1 && chrono->btn_reset_flag == 0) {
   600  000D7E  0012               	return	
   601  000D80                     l237:
   602  000D80  A281               	btfss	3969,1,c	;volatile
   603  000D82  0012               	return	
   604  000D84  0100               	movlb	0	; () banked
   605  000D86  EE20 F002          	lfsr	2,2
   606  000D8A  5179               	movf	task3@chrono& (0+255),w,b
   607  000D8C  26D9               	addwf	fsr2l,f,c
   608  000D8E  517A               	movf	(task3@chrono+1)& (0+255),w,b
   609  000D90  22DA               	addwfc	fsr2h,f,c
   610  000D92  50DF               	movf	indf2,w,c
   611  000D94  A4D8               	btfss	status,2,c
   612  000D96  0012               	return	
   613                           
   614                           ; BSR set to: 0
   615                           ;task_control.c: 57: chrono->compteur_flag = 1;
   616  000D98  EE20 F003          	lfsr	2,3
   617  000D9C  5179               	movf	task3@chrono& (0+255),w,b
   618  000D9E  26D9               	addwf	fsr2l,f,c
   619  000DA0  517A               	movf	(task3@chrono+1)& (0+255),w,b
   620  000DA2  22DA               	addwfc	fsr2h,f,c
   621  000DA4  0E01               	movlw	1
   622  000DA6  6EDF               	movwf	indf2,c
   623                           
   624                           ;task_control.c: 58: chrono->compteur = 0;
   625  000DA8  EE20 F004          	lfsr	2,4
   626  000DAC  5179               	movf	task3@chrono& (0+255),w,b
   627  000DAE  26D9               	addwf	fsr2l,f,c
   628  000DB0  517A               	movf	(task3@chrono+1)& (0+255),w,b
   629  000DB2  22DA               	addwfc	fsr2h,f,c
   630  000DB4  0E00               	movlw	0
   631  000DB6  6EDE               	movwf	postinc2,c
   632  000DB8  0E00               	movlw	0
   633  000DBA  6EDD               	movwf	postdec2,c
   634                           
   635                           ; BSR set to: 0
   636                           ;task_control.c: 59: lcd_sendString("\r00:00");
   637  000DBC  0E01               	movlw	low STR_4
   638  000DBE  6F75               	movwf	lcd_sendString@str& (0+255),b
   639  000DC0  0E08               	movlw	high STR_4
   640  000DC2  6F76               	movwf	(lcd_sendString@str+1)& (0+255),b
   641  000DC4  EC66  F008         	call	_lcd_sendString	;wreg free
   642                           
   643                           ;task_control.c: 60: uart_puts("\r00:00");
   644  000DC8  0E01               	movlw	low STR_4
   645  000DCA  0100               	movlb	0	; () banked
   646  000DCC  6F75               	movwf	uart_puts@str& (0+255),b
   647  000DCE  0E08               	movlw	high STR_4
   648  000DD0  6F76               	movwf	(uart_puts@str+1)& (0+255),b
   649  000DD2  EC88  F007         	call	_uart_puts	;wreg free
   650                           
   651                           ;task_control.c: 61: chrono->btn_reset_flag = 1;
   652  000DD6  0100               	movlb	0	; () banked
   653  000DD8  EE20 F002          	lfsr	2,2
   654  000DDC  5179               	movf	task3@chrono& (0+255),w,b
   655  000DDE  26D9               	addwf	fsr2l,f,c
   656  000DE0  517A               	movf	(task3@chrono+1)& (0+255),w,b
   657  000DE2  22DA               	addwfc	fsr2h,f,c
   658  000DE4  0E01               	movlw	1
   659  000DE6  6EDF               	movwf	indf2,c
   660                           
   661                           ; BSR set to: 0
   662  000DE8  0012               	return	
   663  000DEA                     __end_of_task3:
   664                           	opt stack 0
   665                           tblptru	equ	0xFF8
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           indf2	equ	0xFDF
   669                           postinc2	equ	0xFDE
   670                           postdec2	equ	0xFDD
   671                           fsr2h	equ	0xFDA
   672                           fsr2l	equ	0xFD9
   673                           status	equ	0xFD8
   674                           
   675 ;; *************** function _task2 *****************
   676 ;; Defined at:
   677 ;;		line 36 in file "task_control.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  chrono          2   25[BANK0 ] PTR struct .
   680 ;;		 -> NULL(0), 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  a               1   35[BANK0 ] unsigned char 
   683 ;;  b               1   34[BANK0 ] unsigned char 
   684 ;;  c               1   33[BANK0 ] unsigned char 
   685 ;;  d               1   32[BANK0 ] unsigned char 
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   695 ;;      Params:         0       2       0       0       0       0       0       0       0
   696 ;;      Locals:         0       4       0       0       0       0       0       0       0
   697 ;;      Temps:          0       5       0       0       0       0       0       0       0
   698 ;;      Totals:         0      11       0       0       0       0       0       0       0
   699 ;;Total ram usage:       11 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    6
   702 ;; This function calls:
   703 ;;		___lwdiv
   704 ;;		___wmul
   705 ;;		_uart_putc
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text2
   712  000A54                     __ptext2:
   713                           	opt stack 0
   714  000A54                     _task2:
   715                           	opt stack 24
   716                           
   717                           ;task_control.c: 37: if (chrono->compteur_flag != 1) {
   718                           
   719                           ;incstack = 0
   720  000A54  0100               	movlb	0	; () banked
   721  000A56  EE20 F003          	lfsr	2,3
   722  000A5A  5179               	movf	task2@chrono& (0+255),w,b
   723  000A5C  26D9               	addwf	fsr2l,f,c
   724  000A5E  517A               	movf	(task2@chrono+1)& (0+255),w,b
   725  000A60  22DA               	addwfc	fsr2h,f,c
   726  000A62  04DE               	decf	postinc2,w,c
   727  000A64  B4D8               	btfsc	status,2,c
   728  000A66  0012               	return	
   729                           
   730                           ; BSR set to: 0
   731                           ;task_control.c: 38: uInt8_t a = (chrono->compteur - 1) / 6000;
   732  000A68  EE20 F004          	lfsr	2,4
   733  000A6C  5179               	movf	task2@chrono& (0+255),w,b
   734  000A6E  26D9               	addwf	fsr2l,f,c
   735  000A70  517A               	movf	(task2@chrono+1)& (0+255),w,b
   736  000A72  22DA               	addwfc	fsr2h,f,c
   737  000A74  CFDE F07B          	movff	postinc2,??_task2
   738  000A78  CFDD F07C          	movff	postdec2,??_task2+1
   739  000A7C  0EFF               	movlw	255
   740  000A7E  257B               	addwf	??_task2& (0+255),w,b
   741  000A80  6F75               	movwf	___lwdiv@dividend& (0+255),b
   742  000A82  0EFF               	movlw	255
   743  000A84  217C               	addwfc	(??_task2+1)& (0+255),w,b
   744  000A86  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
   745  000A88  0E17               	movlw	23
   746  000A8A  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
   747  000A8C  0E70               	movlw	112
   748  000A8E  6F77               	movwf	___lwdiv@divisor& (0+255),b
   749  000A90  EC5E  F007         	call	___lwdiv	;wreg free
   750  000A94  0100               	movlb	0	; () banked
   751  000A96  5175               	movf	?___lwdiv& (0+255),w,b
   752  000A98  6F83               	movwf	task2@a& (0+255),b
   753                           
   754                           ; BSR set to: 0
   755                           ;task_control.c: 39: uInt8_t b = (chrono->compteur - 1) / 600 - 10 * a;
   756  000A9A  5183               	movf	task2@a& (0+255),w,b
   757  000A9C  0D0A               	mullw	10
   758  000A9E  50F3               	movf	prodl,w,c
   759  000AA0  0800               	sublw	0
   760  000AA2  6F7B               	movwf	??_task2& (0+255),b
   761  000AA4  EE20 F004          	lfsr	2,4
   762  000AA8  5179               	movf	task2@chrono& (0+255),w,b
   763  000AAA  26D9               	addwf	fsr2l,f,c
   764  000AAC  517A               	movf	(task2@chrono+1)& (0+255),w,b
   765  000AAE  22DA               	addwfc	fsr2h,f,c
   766  000AB0  CFDE F07C          	movff	postinc2,??_task2+1
   767  000AB4  CFDD F07D          	movff	postdec2,??_task2+2
   768  000AB8  0EFF               	movlw	255
   769  000ABA  257C               	addwf	(??_task2+1)& (0+255),w,b
   770  000ABC  6F75               	movwf	___lwdiv@dividend& (0+255),b
   771  000ABE  0EFF               	movlw	255
   772  000AC0  217D               	addwfc	(??_task2+2)& (0+255),w,b
   773  000AC2  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
   774  000AC4  0E02               	movlw	2
   775  000AC6  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
   776  000AC8  0E58               	movlw	88
   777  000ACA  6F77               	movwf	___lwdiv@divisor& (0+255),b
   778  000ACC  EC5E  F007         	call	___lwdiv	;wreg free
   779  000AD0  0100               	movlb	0	; () banked
   780  000AD2  5175               	movf	?___lwdiv& (0+255),w,b
   781  000AD4  257B               	addwf	??_task2& (0+255),w,b
   782  000AD6  6F82               	movwf	task2@b& (0+255),b
   783                           
   784                           ; BSR set to: 0
   785                           ;task_control.c: 40: uInt8_t c = (chrono->compteur - 1) / 100 - 60 * a - 6 * b;
   786  000AD8  5182               	movf	task2@b& (0+255),w,b
   787  000ADA  0D06               	mullw	6
   788  000ADC  50F3               	movf	prodl,w,c
   789  000ADE  0800               	sublw	0
   790  000AE0  6F7B               	movwf	??_task2& (0+255),b
   791  000AE2  5183               	movf	task2@a& (0+255),w,b
   792  000AE4  0D3C               	mullw	60
   793  000AE6  50F3               	movf	prodl,w,c
   794  000AE8  0800               	sublw	0
   795  000AEA  6F7C               	movwf	(??_task2+1)& (0+255),b
   796  000AEC  EE20 F004          	lfsr	2,4
   797  000AF0  5179               	movf	task2@chrono& (0+255),w,b
   798  000AF2  26D9               	addwf	fsr2l,f,c
   799  000AF4  517A               	movf	(task2@chrono+1)& (0+255),w,b
   800  000AF6  22DA               	addwfc	fsr2h,f,c
   801  000AF8  CFDE F07D          	movff	postinc2,??_task2+2
   802  000AFC  CFDD F07E          	movff	postdec2,??_task2+3
   803  000B00  0EFF               	movlw	255
   804  000B02  257D               	addwf	(??_task2+2)& (0+255),w,b
   805  000B04  6F75               	movwf	___lwdiv@dividend& (0+255),b
   806  000B06  0EFF               	movlw	255
   807  000B08  217E               	addwfc	(??_task2+3)& (0+255),w,b
   808  000B0A  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
   809  000B0C  0E00               	movlw	0
   810  000B0E  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
   811  000B10  0E64               	movlw	100
   812  000B12  6F77               	movwf	___lwdiv@divisor& (0+255),b
   813  000B14  EC5E  F007         	call	___lwdiv	;wreg free
   814  000B18  0100               	movlb	0	; () banked
   815  000B1A  5175               	movf	?___lwdiv& (0+255),w,b
   816  000B1C  257C               	addwf	(??_task2+1)& (0+255),w,b
   817  000B1E  257B               	addwf	??_task2& (0+255),w,b
   818  000B20  6F81               	movwf	task2@c& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821                           ;task_control.c: 41: uInt8_t d = (chrono->compteur - 1) / 10 - 600 * a - 60 * b - 10 * c
      +                          ;
   822  000B22  5181               	movf	task2@c& (0+255),w,b
   823  000B24  0D0A               	mullw	10
   824  000B26  50F3               	movf	prodl,w,c
   825  000B28  0800               	sublw	0
   826  000B2A  6F7B               	movwf	??_task2& (0+255),b
   827  000B2C  5182               	movf	task2@b& (0+255),w,b
   828  000B2E  0D3C               	mullw	60
   829  000B30  50F3               	movf	prodl,w,c
   830  000B32  0800               	sublw	0
   831  000B34  6F7C               	movwf	(??_task2+1)& (0+255),b
   832  000B36  C083  F075         	movff	task2@a,___wmul@multiplier
   833  000B3A  6B76               	clrf	(___wmul@multiplier+1)& (0+255),b
   834  000B3C  0E02               	movlw	2
   835  000B3E  6F78               	movwf	(___wmul@multiplicand+1)& (0+255),b
   836  000B40  0E58               	movlw	88
   837  000B42  6F77               	movwf	___wmul@multiplicand& (0+255),b
   838  000B44  EC7C  F008         	call	___wmul	;wreg free
   839  000B48  0100               	movlb	0	; () banked
   840  000B4A  5175               	movf	?___wmul& (0+255),w,b
   841  000B4C  0800               	sublw	0
   842  000B4E  6F7D               	movwf	(??_task2+2)& (0+255),b
   843  000B50  EE20 F004          	lfsr	2,4
   844  000B54  5179               	movf	task2@chrono& (0+255),w,b
   845  000B56  26D9               	addwf	fsr2l,f,c
   846  000B58  517A               	movf	(task2@chrono+1)& (0+255),w,b
   847  000B5A  22DA               	addwfc	fsr2h,f,c
   848  000B5C  CFDE F07E          	movff	postinc2,??_task2+3
   849  000B60  CFDD F07F          	movff	postdec2,??_task2+4
   850  000B64  0EFF               	movlw	255
   851  000B66  257E               	addwf	(??_task2+3)& (0+255),w,b
   852  000B68  6F75               	movwf	___lwdiv@dividend& (0+255),b
   853  000B6A  0EFF               	movlw	255
   854  000B6C  217F               	addwfc	(??_task2+4)& (0+255),w,b
   855  000B6E  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
   856  000B70  0E00               	movlw	0
   857  000B72  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
   858  000B74  0E0A               	movlw	10
   859  000B76  6F77               	movwf	___lwdiv@divisor& (0+255),b
   860  000B78  EC5E  F007         	call	___lwdiv	;wreg free
   861  000B7C  0100               	movlb	0	; () banked
   862  000B7E  5175               	movf	?___lwdiv& (0+255),w,b
   863  000B80  257D               	addwf	(??_task2+2)& (0+255),w,b
   864  000B82  257C               	addwf	(??_task2+1)& (0+255),w,b
   865  000B84  257B               	addwf	??_task2& (0+255),w,b
   866  000B86  6F80               	movwf	task2@d& (0+255),b
   867                           
   868                           ; BSR set to: 0
   869                           ;task_control.c: 43: uart_putc('\r');
   870  000B88  0E0D               	movlw	13
   871  000B8A  ECE6  F008         	call	_uart_putc
   872                           
   873                           ;task_control.c: 44: uart_putc(a + 48);
   874  000B8E  0100               	movlb	0	; () banked
   875  000B90  5183               	movf	task2@a& (0+255),w,b
   876  000B92  0F30               	addlw	48
   877  000B94  ECE6  F008         	call	_uart_putc
   878                           
   879                           ;task_control.c: 45: uart_putc(b + 48);
   880  000B98  0100               	movlb	0	; () banked
   881  000B9A  5182               	movf	task2@b& (0+255),w,b
   882  000B9C  0F30               	addlw	48
   883  000B9E  ECE6  F008         	call	_uart_putc
   884                           
   885                           ;task_control.c: 46: uart_putc(':');
   886  000BA2  0E3A               	movlw	58
   887  000BA4  ECE6  F008         	call	_uart_putc
   888                           
   889                           ;task_control.c: 47: uart_putc(c + 48);
   890  000BA8  0100               	movlb	0	; () banked
   891  000BAA  5181               	movf	task2@c& (0+255),w,b
   892  000BAC  0F30               	addlw	48
   893  000BAE  ECE6  F008         	call	_uart_putc
   894                           
   895                           ;task_control.c: 48: uart_putc(d + 48);
   896  000BB2  0100               	movlb	0	; () banked
   897  000BB4  5180               	movf	task2@d& (0+255),w,b
   898  000BB6  0F30               	addlw	48
   899  000BB8  ECE6  F008         	call	_uart_putc
   900  000BBC  0012               	return	
   901  000BBE                     __end_of_task2:
   902                           	opt stack 0
   903                           tblptru	equ	0xFF8
   904                           prodl	equ	0xFF3
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           indf2	equ	0xFDF
   908                           postinc2	equ	0xFDE
   909                           postdec2	equ	0xFDD
   910                           fsr2h	equ	0xFDA
   911                           fsr2l	equ	0xFD9
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _task1 *****************
   915 ;; Defined at:
   916 ;;		line 3 in file "task_control.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  chrono          2   25[BANK0 ] PTR struct .
   919 ;;		 -> NULL(0), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  a               1   35[BANK0 ] unsigned char 
   922 ;;  b               1   34[BANK0 ] unsigned char 
   923 ;;  c               1   33[BANK0 ] unsigned char 
   924 ;;  d               1   32[BANK0 ] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   934 ;;      Params:         0       2       0       0       0       0       0       0       0
   935 ;;      Locals:         0       4       0       0       0       0       0       0       0
   936 ;;      Temps:          0       5       0       0       0       0       0       0       0
   937 ;;      Totals:         0      11       0       0       0       0       0       0       0
   938 ;;Total ram usage:       11 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    9
   941 ;; This function calls:
   942 ;;		___lwdiv
   943 ;;		___lwmod
   944 ;;		___wmul
   945 ;;		_lcd_sendChar
   946 ;;		_lcd_sendCommand
   947 ;;		_lcd_sendString
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text3
   954  00080A                     __ptext3:
   955                           	opt stack 0
   956  00080A                     _task1:
   957                           	opt stack 21
   958                           
   959                           ;task_control.c: 4: if (PORTBbits.RB0 == 0) {
   960                           
   961                           ;incstack = 0
   962  00080A  B081               	btfsc	3969,0,c	;volatile
   963  00080C  D009               	goto	l223
   964                           
   965                           ;task_control.c: 5: chrono->btn_stat_stop_flag = 0;
   966  00080E  0100               	movlb	0	; () banked
   967  000810  EE20 F001          	lfsr	2,1
   968  000814  5179               	movf	task1@chrono& (0+255),w,b
   969  000816  26D9               	addwf	fsr2l,f,c
   970  000818  517A               	movf	(task1@chrono+1)& (0+255),w,b
   971  00081A  22DA               	addwfc	fsr2h,f,c
   972  00081C  0E00               	movlw	0
   973  00081E  D022               	goto	L1
   974  000820                     l223:
   975  000820  A081               	btfss	3969,0,c	;volatile
   976  000822  D021               	goto	l225
   977  000824  0100               	movlb	0	; () banked
   978  000826  EE20 F001          	lfsr	2,1
   979  00082A  5179               	movf	task1@chrono& (0+255),w,b
   980  00082C  26D9               	addwf	fsr2l,f,c
   981  00082E  517A               	movf	(task1@chrono+1)& (0+255),w,b
   982  000830  22DA               	addwfc	fsr2h,f,c
   983  000832  50DF               	movf	indf2,w,c
   984  000834  A4D8               	btfss	status,2,c
   985  000836  D017               	goto	l225
   986                           
   987                           ; BSR set to: 0
   988                           ;task_control.c: 8: chrono->compteur_flag = ~chrono->compteur_flag;
   989  000838  EE20 F003          	lfsr	2,3
   990  00083C  5179               	movf	task1@chrono& (0+255),w,b
   991  00083E  26D9               	addwf	fsr2l,f,c
   992  000840  517A               	movf	(task1@chrono+1)& (0+255),w,b
   993  000842  22DA               	addwfc	fsr2h,f,c
   994  000844  EE10 F003          	lfsr	1,3
   995  000848  5179               	movf	task1@chrono& (0+255),w,b
   996  00084A  26E1               	addwf	fsr1l,f,c
   997  00084C  517A               	movf	(task1@chrono+1)& (0+255),w,b
   998  00084E  22E2               	addwfc	fsr1h,f,c
   999  000850  50E7               	movf	indf1,w,c
  1000  000852  0AFF               	xorlw	255
  1001  000854  6EDF               	movwf	indf2,c
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;task_control.c: 10: chrono->btn_stat_stop_flag = 1;
  1005  000856  EE20 F001          	lfsr	2,1
  1006  00085A  5179               	movf	task1@chrono& (0+255),w,b
  1007  00085C  26D9               	addwf	fsr2l,f,c
  1008  00085E  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1009  000860  22DA               	addwfc	fsr2h,f,c
  1010  000862  0E01               	movlw	1
  1011  000864                     L1:
  1012  000864  6EDF               	movwf	indf2,c
  1013  000866                     l225:
  1014                           
  1015                           ;task_control.c: 11: }
  1016                           ;task_control.c: 12: if (chrono->compteur_flag != 1) {
  1017                           
  1018                           ; BSR set to: 0
  1019                           
  1020                           ; BSR set to: 0
  1021  000866  0100               	movlb	0	; () banked
  1022  000868  EE20 F003          	lfsr	2,3
  1023  00086C  5179               	movf	task1@chrono& (0+255),w,b
  1024  00086E  26D9               	addwf	fsr2l,f,c
  1025  000870  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1026  000872  22DA               	addwfc	fsr2h,f,c
  1027  000874  04DE               	decf	postinc2,w,c
  1028  000876  B4D8               	btfsc	status,2,c
  1029  000878  0012               	return	
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;task_control.c: 13: chrono->compteur++;
  1033  00087A  EE20 F004          	lfsr	2,4
  1034  00087E  5179               	movf	task1@chrono& (0+255),w,b
  1035  000880  26D9               	addwf	fsr2l,f,c
  1036  000882  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1037  000884  22DA               	addwfc	fsr2h,f,c
  1038  000886  2ADE               	incf	postinc2,f,c
  1039  000888  0E00               	movlw	0
  1040  00088A  22DD               	addwfc	postdec2,f,c
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;task_control.c: 15: if ((chrono->compteur - 1) % 10 == 0) {
  1044  00088C  EE20 F004          	lfsr	2,4
  1045  000890  5179               	movf	task1@chrono& (0+255),w,b
  1046  000892  26D9               	addwf	fsr2l,f,c
  1047  000894  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1048  000896  22DA               	addwfc	fsr2h,f,c
  1049  000898  CFDE F07B          	movff	postinc2,??_task1
  1050  00089C  CFDD F07C          	movff	postdec2,??_task1+1
  1051  0008A0  0EFF               	movlw	255
  1052  0008A2  257B               	addwf	??_task1& (0+255),w,b
  1053  0008A4  6F75               	movwf	___lwmod@dividend& (0+255),b
  1054  0008A6  0EFF               	movlw	255
  1055  0008A8  217C               	addwfc	(??_task1+1)& (0+255),w,b
  1056  0008AA  6F76               	movwf	(___lwmod@dividend+1)& (0+255),b
  1057  0008AC  0E00               	movlw	0
  1058  0008AE  6F78               	movwf	(___lwmod@divisor+1)& (0+255),b
  1059  0008B0  0E0A               	movlw	10
  1060  0008B2  6F77               	movwf	___lwmod@divisor& (0+255),b
  1061  0008B4  ECD2  F007         	call	___lwmod	;wreg free
  1062  0008B8  0100               	movlb	0	; () banked
  1063  0008BA  5175               	movf	?___lwmod& (0+255),w,b
  1064  0008BC  1176               	iorwf	(?___lwmod+1)& (0+255),w,b
  1065  0008BE  A4D8               	btfss	status,2,c
  1066  0008C0  0012               	return	
  1067                           
  1068                           ; BSR set to: 0
  1069                           ;task_control.c: 16: if (chrono->compteur == 36000 + 1) {
  1070  0008C2  EE20 F004          	lfsr	2,4
  1071  0008C6  5179               	movf	task1@chrono& (0+255),w,b
  1072  0008C8  26D9               	addwf	fsr2l,f,c
  1073  0008CA  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1074  0008CC  22DA               	addwfc	fsr2h,f,c
  1075  0008CE  0EA1               	movlw	161
  1076  0008D0  18DE               	xorwf	postinc2,w,c
  1077  0008D2  E115               	bnz	l1970
  1078  0008D4  0E8C               	movlw	140
  1079  0008D6  18DE               	xorwf	postinc2,w,c
  1080  0008D8  A4D8               	btfss	status,2,c
  1081  0008DA  D011               	goto	l228
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;task_control.c: 17: chrono->compteur = 0;
  1085  0008DC  EE20 F004          	lfsr	2,4
  1086  0008E0  5179               	movf	task1@chrono& (0+255),w,b
  1087  0008E2  26D9               	addwf	fsr2l,f,c
  1088  0008E4  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1089  0008E6  22DA               	addwfc	fsr2h,f,c
  1090  0008E8  0E00               	movlw	0
  1091  0008EA  6EDE               	movwf	postinc2,c
  1092  0008EC  0E00               	movlw	0
  1093  0008EE  6EDD               	movwf	postdec2,c
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;task_control.c: 18: lcd_sendString("00:00");
  1097  0008F0  0E02               	movlw	low (STR_4+1)
  1098  0008F2  6F75               	movwf	lcd_sendString@str& (0+255),b
  1099  0008F4  0E08               	movlw	high (STR_4+1)
  1100  0008F6  6F76               	movwf	(lcd_sendString@str+1)& (0+255),b
  1101  0008F8  EC66  F008         	call	_lcd_sendString	;wreg free
  1102                           
  1103                           ;task_control.c: 19: } else {
  1104  0008FC  0012               	return	
  1105  0008FE                     l228:
  1106  0008FE                     l1970:
  1107                           
  1108                           ;task_control.c: 20: lcd_sendCommand(0x80);
  1109  0008FE  0E80               	movlw	128
  1110  000900  ECC0  F008         	call	_lcd_sendCommand
  1111                           
  1112                           ;task_control.c: 21: uInt8_t a = (chrono->compteur - 1) / 6000;
  1113  000904  0100               	movlb	0	; () banked
  1114  000906  EE20 F004          	lfsr	2,4
  1115  00090A  5179               	movf	task1@chrono& (0+255),w,b
  1116  00090C  26D9               	addwf	fsr2l,f,c
  1117  00090E  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1118  000910  22DA               	addwfc	fsr2h,f,c
  1119  000912  CFDE F07B          	movff	postinc2,??_task1
  1120  000916  CFDD F07C          	movff	postdec2,??_task1+1
  1121  00091A  0EFF               	movlw	255
  1122  00091C  257B               	addwf	??_task1& (0+255),w,b
  1123  00091E  6F75               	movwf	___lwdiv@dividend& (0+255),b
  1124  000920  0EFF               	movlw	255
  1125  000922  217C               	addwfc	(??_task1+1)& (0+255),w,b
  1126  000924  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
  1127  000926  0E17               	movlw	23
  1128  000928  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1129  00092A  0E70               	movlw	112
  1130  00092C  6F77               	movwf	___lwdiv@divisor& (0+255),b
  1131  00092E  EC5E  F007         	call	___lwdiv	;wreg free
  1132  000932  0100               	movlb	0	; () banked
  1133  000934  5175               	movf	?___lwdiv& (0+255),w,b
  1134  000936  6F83               	movwf	task1@a& (0+255),b
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;task_control.c: 22: uInt8_t b = (chrono->compteur - 1) / 600 - 10 * a;
  1138  000938  5183               	movf	task1@a& (0+255),w,b
  1139  00093A  0D0A               	mullw	10
  1140  00093C  50F3               	movf	prodl,w,c
  1141  00093E  0800               	sublw	0
  1142  000940  6F7B               	movwf	??_task1& (0+255),b
  1143  000942  EE20 F004          	lfsr	2,4
  1144  000946  5179               	movf	task1@chrono& (0+255),w,b
  1145  000948  26D9               	addwf	fsr2l,f,c
  1146  00094A  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1147  00094C  22DA               	addwfc	fsr2h,f,c
  1148  00094E  CFDE F07C          	movff	postinc2,??_task1+1
  1149  000952  CFDD F07D          	movff	postdec2,??_task1+2
  1150  000956  0EFF               	movlw	255
  1151  000958  257C               	addwf	(??_task1+1)& (0+255),w,b
  1152  00095A  6F75               	movwf	___lwdiv@dividend& (0+255),b
  1153  00095C  0EFF               	movlw	255
  1154  00095E  217D               	addwfc	(??_task1+2)& (0+255),w,b
  1155  000960  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
  1156  000962  0E02               	movlw	2
  1157  000964  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1158  000966  0E58               	movlw	88
  1159  000968  6F77               	movwf	___lwdiv@divisor& (0+255),b
  1160  00096A  EC5E  F007         	call	___lwdiv	;wreg free
  1161  00096E  0100               	movlb	0	; () banked
  1162  000970  5175               	movf	?___lwdiv& (0+255),w,b
  1163  000972  257B               	addwf	??_task1& (0+255),w,b
  1164  000974  6F82               	movwf	task1@b& (0+255),b
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;task_control.c: 23: uInt8_t c = (chrono->compteur - 1) / 100 - 60 * a - 6 * b;
  1168  000976  5182               	movf	task1@b& (0+255),w,b
  1169  000978  0D06               	mullw	6
  1170  00097A  50F3               	movf	prodl,w,c
  1171  00097C  0800               	sublw	0
  1172  00097E  6F7B               	movwf	??_task1& (0+255),b
  1173  000980  5183               	movf	task1@a& (0+255),w,b
  1174  000982  0D3C               	mullw	60
  1175  000984  50F3               	movf	prodl,w,c
  1176  000986  0800               	sublw	0
  1177  000988  6F7C               	movwf	(??_task1+1)& (0+255),b
  1178  00098A  EE20 F004          	lfsr	2,4
  1179  00098E  5179               	movf	task1@chrono& (0+255),w,b
  1180  000990  26D9               	addwf	fsr2l,f,c
  1181  000992  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1182  000994  22DA               	addwfc	fsr2h,f,c
  1183  000996  CFDE F07D          	movff	postinc2,??_task1+2
  1184  00099A  CFDD F07E          	movff	postdec2,??_task1+3
  1185  00099E  0EFF               	movlw	255
  1186  0009A0  257D               	addwf	(??_task1+2)& (0+255),w,b
  1187  0009A2  6F75               	movwf	___lwdiv@dividend& (0+255),b
  1188  0009A4  0EFF               	movlw	255
  1189  0009A6  217E               	addwfc	(??_task1+3)& (0+255),w,b
  1190  0009A8  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
  1191  0009AA  0E00               	movlw	0
  1192  0009AC  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1193  0009AE  0E64               	movlw	100
  1194  0009B0  6F77               	movwf	___lwdiv@divisor& (0+255),b
  1195  0009B2  EC5E  F007         	call	___lwdiv	;wreg free
  1196  0009B6  0100               	movlb	0	; () banked
  1197  0009B8  5175               	movf	?___lwdiv& (0+255),w,b
  1198  0009BA  257C               	addwf	(??_task1+1)& (0+255),w,b
  1199  0009BC  257B               	addwf	??_task1& (0+255),w,b
  1200  0009BE  6F81               	movwf	task1@c& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;task_control.c: 24: uInt8_t d = (chrono->compteur - 1) / 10 - 600 * a - 60 * b - 10 * c
      +                          ;
  1204  0009C0  5181               	movf	task1@c& (0+255),w,b
  1205  0009C2  0D0A               	mullw	10
  1206  0009C4  50F3               	movf	prodl,w,c
  1207  0009C6  0800               	sublw	0
  1208  0009C8  6F7B               	movwf	??_task1& (0+255),b
  1209  0009CA  5182               	movf	task1@b& (0+255),w,b
  1210  0009CC  0D3C               	mullw	60
  1211  0009CE  50F3               	movf	prodl,w,c
  1212  0009D0  0800               	sublw	0
  1213  0009D2  6F7C               	movwf	(??_task1+1)& (0+255),b
  1214  0009D4  C083  F075         	movff	task1@a,___wmul@multiplier
  1215  0009D8  6B76               	clrf	(___wmul@multiplier+1)& (0+255),b
  1216  0009DA  0E02               	movlw	2
  1217  0009DC  6F78               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1218  0009DE  0E58               	movlw	88
  1219  0009E0  6F77               	movwf	___wmul@multiplicand& (0+255),b
  1220  0009E2  EC7C  F008         	call	___wmul	;wreg free
  1221  0009E6  0100               	movlb	0	; () banked
  1222  0009E8  5175               	movf	?___wmul& (0+255),w,b
  1223  0009EA  0800               	sublw	0
  1224  0009EC  6F7D               	movwf	(??_task1+2)& (0+255),b
  1225  0009EE  EE20 F004          	lfsr	2,4
  1226  0009F2  5179               	movf	task1@chrono& (0+255),w,b
  1227  0009F4  26D9               	addwf	fsr2l,f,c
  1228  0009F6  517A               	movf	(task1@chrono+1)& (0+255),w,b
  1229  0009F8  22DA               	addwfc	fsr2h,f,c
  1230  0009FA  CFDE F07E          	movff	postinc2,??_task1+3
  1231  0009FE  CFDD F07F          	movff	postdec2,??_task1+4
  1232  000A02  0EFF               	movlw	255
  1233  000A04  257E               	addwf	(??_task1+3)& (0+255),w,b
  1234  000A06  6F75               	movwf	___lwdiv@dividend& (0+255),b
  1235  000A08  0EFF               	movlw	255
  1236  000A0A  217F               	addwfc	(??_task1+4)& (0+255),w,b
  1237  000A0C  6F76               	movwf	(___lwdiv@dividend+1)& (0+255),b
  1238  000A0E  0E00               	movlw	0
  1239  000A10  6F78               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1240  000A12  0E0A               	movlw	10
  1241  000A14  6F77               	movwf	___lwdiv@divisor& (0+255),b
  1242  000A16  EC5E  F007         	call	___lwdiv	;wreg free
  1243  000A1A  0100               	movlb	0	; () banked
  1244  000A1C  5175               	movf	?___lwdiv& (0+255),w,b
  1245  000A1E  257D               	addwf	(??_task1+2)& (0+255),w,b
  1246  000A20  257C               	addwf	(??_task1+1)& (0+255),w,b
  1247  000A22  257B               	addwf	??_task1& (0+255),w,b
  1248  000A24  6F80               	movwf	task1@d& (0+255),b
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;task_control.c: 26: lcd_sendChar(a + 48);
  1252  000A26  5183               	movf	task1@a& (0+255),w,b
  1253  000A28  0F30               	addlw	48
  1254  000A2A  EC31  F008         	call	_lcd_sendChar
  1255                           
  1256                           ;task_control.c: 27: lcd_sendChar(b + 48);
  1257  000A2E  0100               	movlb	0	; () banked
  1258  000A30  5182               	movf	task1@b& (0+255),w,b
  1259  000A32  0F30               	addlw	48
  1260  000A34  EC31  F008         	call	_lcd_sendChar
  1261                           
  1262                           ;task_control.c: 28: lcd_sendChar(':');
  1263  000A38  0E3A               	movlw	58
  1264  000A3A  EC31  F008         	call	_lcd_sendChar
  1265                           
  1266                           ;task_control.c: 29: lcd_sendChar(c + 48);
  1267  000A3E  0100               	movlb	0	; () banked
  1268  000A40  5181               	movf	task1@c& (0+255),w,b
  1269  000A42  0F30               	addlw	48
  1270  000A44  EC31  F008         	call	_lcd_sendChar
  1271                           
  1272                           ;task_control.c: 30: lcd_sendChar(d + 48);
  1273  000A48  0100               	movlb	0	; () banked
  1274  000A4A  5180               	movf	task1@d& (0+255),w,b
  1275  000A4C  0F30               	addlw	48
  1276  000A4E  EC31  F008         	call	_lcd_sendChar
  1277  000A52  0012               	return	
  1278  000A54                     __end_of_task1:
  1279                           	opt stack 0
  1280                           tblptru	equ	0xFF8
  1281                           prodl	equ	0xFF3
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           indf1	equ	0xFE7
  1285                           fsr1h	equ	0xFE2
  1286                           fsr1l	equ	0xFE1
  1287                           indf2	equ	0xFDF
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function ___wmul *****************
  1295 ;; Defined at:
  1296 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  multiplier      2   21[BANK0 ] unsigned int 
  1299 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  product         2   25[COMRAM] unsigned int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  2   21[BANK0 ] unsigned int 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, prodl, prodh
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1311 ;;      Params:         0       4       0       0       0       0       0       0       0
  1312 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1314 ;;      Totals:         2       4       0       0       0       0       0       0       0
  1315 ;;Total ram usage:        6 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    5
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_task1
  1322 ;;		_task2
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text4
  1327  0010F8                     __ptext4:
  1328                           	opt stack 0
  1329  0010F8                     ___wmul:
  1330                           	opt stack 24
  1331                           
  1332                           ;incstack = 0
  1333  0010F8  0100               	movlb	0	; () banked
  1334  0010FA  5175               	movf	___wmul@multiplier& (0+255),w,b
  1335  0010FC  0377               	mulwf	___wmul@multiplicand& (0+255),b
  1336  0010FE  CFF3 F041          	movff	prodl,___wmul@product
  1337  001102  CFF4 F042          	movff	prodh,___wmul@product+1
  1338  001106  5175               	movf	___wmul@multiplier& (0+255),w,b
  1339  001108  0378               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1340  00110A  50F3               	movf	prodl,w,c
  1341  00110C  2642               	addwf	___wmul@product+1,f,c
  1342  00110E  5176               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1343  001110  0377               	mulwf	___wmul@multiplicand& (0+255),b
  1344  001112  50F3               	movf	prodl,w,c
  1345  001114  2642               	addwf	___wmul@product+1,f,c
  1346                           
  1347                           ; BSR set to: 0
  1348  001116  C041  F075         	movff	___wmul@product,?___wmul
  1349  00111A  C042  F076         	movff	___wmul@product+1,?___wmul+1
  1350  00111E  0012               	return	
  1351  001120                     __end_of___wmul:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           prodh	equ	0xFF4
  1355                           prodl	equ	0xFF3
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           indf1	equ	0xFE7
  1359                           fsr1h	equ	0xFE2
  1360                           fsr1l	equ	0xFE1
  1361                           indf2	equ	0xFDF
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           fsr2h	equ	0xFDA
  1365                           fsr2l	equ	0xFD9
  1366                           status	equ	0xFD8
  1367                           
  1368 ;; *************** function ___lwmod *****************
  1369 ;; Defined at:
  1370 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  dividend        2   21[BANK0 ] unsigned int 
  1373 ;;  divisor         2   23[BANK0 ] unsigned int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  counter         1   25[COMRAM] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  2   21[BANK0 ] unsigned int 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1385 ;;      Params:         0       4       0       0       0       0       0       0       0
  1386 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1388 ;;      Totals:         1       4       0       0       0       0       0       0       0
  1389 ;;Total ram usage:        5 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    5
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_task1
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text5
  1400  000FA4                     __ptext5:
  1401                           	opt stack 0
  1402  000FA4                     ___lwmod:
  1403                           	opt stack 24
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;incstack = 0
  1407  000FA4  0100               	movlb	0	; () banked
  1408  000FA6  5177               	movf	___lwmod@divisor& (0+255),w,b
  1409  000FA8  1178               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1410  000FAA  B4D8               	btfsc	status,2,c
  1411  000FAC  D018               	goto	l751
  1412                           
  1413                           ; BSR set to: 0
  1414  000FAE  0E01               	movlw	1
  1415  000FB0  6E41               	movwf	___lwmod@counter,c
  1416  000FB2  D004               	goto	l746
  1417  000FB4                     
  1418                           ; BSR set to: 0
  1419                           
  1420                           ; BSR set to: 0
  1421  000FB4  90D8               	bcf	status,0,c
  1422  000FB6  3777               	rlcf	___lwmod@divisor& (0+255),f,b
  1423  000FB8  3778               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1424  000FBA  2A41               	incf	___lwmod@counter,f,c
  1425  000FBC                     l746:
  1426                           
  1427                           ; BSR set to: 0
  1428                           
  1429                           ; BSR set to: 0
  1430  000FBC  AF78               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1431  000FBE  D7FA               	goto	l747
  1432  000FC0                     u550:
  1433                           
  1434                           ; BSR set to: 0
  1435                           
  1436                           ; BSR set to: 0
  1437                           
  1438                           ; BSR set to: 0
  1439  000FC0  5177               	movf	___lwmod@divisor& (0+255),w,b
  1440  000FC2  5D75               	subwf	___lwmod@dividend& (0+255),w,b
  1441  000FC4  5178               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1442  000FC6  5976               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1443  000FC8  A0D8               	btfss	status,0,c
  1444  000FCA  D004               	goto	l750
  1445                           
  1446                           ; BSR set to: 0
  1447  000FCC  5177               	movf	___lwmod@divisor& (0+255),w,b
  1448  000FCE  5F75               	subwf	___lwmod@dividend& (0+255),f,b
  1449  000FD0  5178               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1450  000FD2  5B76               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1451  000FD4                     l750:
  1452                           
  1453                           ; BSR set to: 0
  1454                           
  1455                           ; BSR set to: 0
  1456  000FD4  90D8               	bcf	status,0,c
  1457  000FD6  3378               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1458  000FD8  3377               	rrcf	___lwmod@divisor& (0+255),f,b
  1459                           
  1460                           ; BSR set to: 0
  1461  000FDA  2E41               	decfsz	___lwmod@counter,f,c
  1462  000FDC  D7F1               	goto	u550
  1463  000FDE                     l751:
  1464                           
  1465                           ; BSR set to: 0
  1466                           
  1467                           ; BSR set to: 0
  1468  000FDE  C075  F075         	movff	___lwmod@dividend,?___lwmod
  1469  000FE2  C076  F076         	movff	___lwmod@dividend+1,?___lwmod+1
  1470                           
  1471                           ; BSR set to: 0
  1472  000FE6  0012               	return		;funcret
  1473  000FE8                     __end_of___lwmod:
  1474                           	opt stack 0
  1475                           tblptru	equ	0xFF8
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           indf1	equ	0xFE7
  1481                           fsr1h	equ	0xFE2
  1482                           fsr1l	equ	0xFE1
  1483                           indf2	equ	0xFDF
  1484                           postinc2	equ	0xFDE
  1485                           postdec2	equ	0xFDD
  1486                           fsr2h	equ	0xFDA
  1487                           fsr2l	equ	0xFD9
  1488                           status	equ	0xFD8
  1489                           
  1490 ;; *************** function ___lwdiv *****************
  1491 ;; Defined at:
  1492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;  dividend        2   21[BANK0 ] unsigned int 
  1495 ;;  divisor         2   23[BANK0 ] unsigned int 
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  quotient        2   26[COMRAM] unsigned int 
  1498 ;;  counter         1   25[COMRAM] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  2   21[BANK0 ] unsigned int 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1508 ;;      Params:         0       4       0       0       0       0       0       0       0
  1509 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1511 ;;      Totals:         3       4       0       0       0       0       0       0       0
  1512 ;;Total ram usage:        7 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    5
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_task1
  1519 ;;		_task2
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text6
  1524  000EBC                     __ptext6:
  1525                           	opt stack 0
  1526  000EBC                     ___lwdiv:
  1527                           	opt stack 24
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;incstack = 0
  1531  000EBC  0E00               	movlw	0
  1532  000EBE  6E43               	movwf	___lwdiv@quotient+1,c
  1533  000EC0  0E00               	movlw	0
  1534  000EC2  6E42               	movwf	___lwdiv@quotient,c
  1535  000EC4  0100               	movlb	0	; () banked
  1536  000EC6  5177               	movf	___lwdiv@divisor& (0+255),w,b
  1537  000EC8  1178               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1538  000ECA  B4D8               	btfsc	status,2,c
  1539  000ECC  D01C               	goto	l741
  1540                           
  1541                           ; BSR set to: 0
  1542  000ECE  0E01               	movlw	1
  1543  000ED0  6E41               	movwf	___lwdiv@counter,c
  1544  000ED2  D004               	goto	l736
  1545  000ED4                     
  1546                           ; BSR set to: 0
  1547                           
  1548                           ; BSR set to: 0
  1549  000ED4  90D8               	bcf	status,0,c
  1550  000ED6  3777               	rlcf	___lwdiv@divisor& (0+255),f,b
  1551  000ED8  3778               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1552  000EDA  2A41               	incf	___lwdiv@counter,f,c
  1553  000EDC                     l736:
  1554                           
  1555                           ; BSR set to: 0
  1556                           
  1557                           ; BSR set to: 0
  1558  000EDC  AF78               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1559  000EDE  D7FA               	goto	l737
  1560  000EE0                     u900:
  1561                           
  1562                           ; BSR set to: 0
  1563                           
  1564                           ; BSR set to: 0
  1565                           
  1566                           ; BSR set to: 0
  1567  000EE0  90D8               	bcf	status,0,c
  1568  000EE2  3642               	rlcf	___lwdiv@quotient,f,c
  1569  000EE4  3643               	rlcf	___lwdiv@quotient+1,f,c
  1570                           
  1571                           ; BSR set to: 0
  1572  000EE6  5177               	movf	___lwdiv@divisor& (0+255),w,b
  1573  000EE8  5D75               	subwf	___lwdiv@dividend& (0+255),w,b
  1574  000EEA  5178               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1575  000EEC  5976               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1576  000EEE  A0D8               	btfss	status,0,c
  1577  000EF0  D005               	goto	l740
  1578                           
  1579                           ; BSR set to: 0
  1580  000EF2  5177               	movf	___lwdiv@divisor& (0+255),w,b
  1581  000EF4  5F75               	subwf	___lwdiv@dividend& (0+255),f,b
  1582  000EF6  5178               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1583  000EF8  5B76               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1584                           
  1585                           ; BSR set to: 0
  1586  000EFA  8042               	bsf	___lwdiv@quotient,0,c
  1587  000EFC                     l740:
  1588                           
  1589                           ; BSR set to: 0
  1590                           
  1591                           ; BSR set to: 0
  1592  000EFC  90D8               	bcf	status,0,c
  1593  000EFE  3378               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1594  000F00  3377               	rrcf	___lwdiv@divisor& (0+255),f,b
  1595                           
  1596                           ; BSR set to: 0
  1597  000F02  2E41               	decfsz	___lwdiv@counter,f,c
  1598  000F04  D7ED               	goto	u900
  1599  000F06                     l741:
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604  000F06  C042  F075         	movff	___lwdiv@quotient,?___lwdiv
  1605  000F0A  C043  F076         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1606                           
  1607                           ; BSR set to: 0
  1608  000F0E  0012               	return		;funcret
  1609  000F10                     __end_of___lwdiv:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           prodh	equ	0xFF4
  1613                           prodl	equ	0xFF3
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           indf1	equ	0xFE7
  1617                           fsr1h	equ	0xFE2
  1618                           fsr1l	equ	0xFE1
  1619                           indf2	equ	0xFDF
  1620                           postinc2	equ	0xFDE
  1621                           postdec2	equ	0xFDD
  1622                           fsr2h	equ	0xFDA
  1623                           fsr2l	equ	0xFD9
  1624                           status	equ	0xFD8
  1625                           
  1626 ;; *************** function _system_init *****************
  1627 ;; Defined at:
  1628 ;;		line 3 in file "app_init.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1642 ;;      Params:         0       0       0       0       0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1645 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1646 ;;Total ram usage:        0 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    8
  1649 ;; This function calls:
  1650 ;;		_lcd_init
  1651 ;;		_timer0_init
  1652 ;;		_uart_init
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text7
  1659  00102A                     __ptext7:
  1660                           	opt stack 0
  1661  00102A                     _system_init:
  1662                           	opt stack 22
  1663                           
  1664                           ;app_init.c: 4: TRISBbits.TRISB0 = 1; TRISBbits.TRISB1 = 1; ADCON1=0x0E;;
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;incstack = 0
  1668  00102A  8093               	bsf	3987,0,c	;volatile
  1669  00102C  8293               	bsf	3987,1,c	;volatile
  1670  00102E  0E0E               	movlw	14
  1671  001030  6EC1               	movwf	4033,c	;volatile
  1672                           
  1673                           ;app_init.c: 5: lcd_init();
  1674  001032  ECAF  F007         	call	_lcd_init	;wreg free
  1675                           
  1676                           ;app_init.c: 6: timer0_init(20000);
  1677  001036  0E4E               	movlw	78
  1678  001038  6E42               	movwf	timer0_init@count+1,c
  1679  00103A  0E20               	movlw	32
  1680  00103C  6E41               	movwf	timer0_init@count,c
  1681  00103E  EC4C  F008         	call	_timer0_init	;wreg free
  1682                           
  1683                           ;app_init.c: 7: uart_init(9600);
  1684  001042  0E80               	movlw	128
  1685  001044  0100               	movlb	0	; () banked
  1686  001046  6F82               	movwf	uart_init@bdrate& (0+255),b
  1687  001048  0E25               	movlw	37
  1688  00104A  6F83               	movwf	(uart_init@bdrate+1)& (0+255),b
  1689  00104C  0E00               	movlw	0
  1690  00104E  6F84               	movwf	(uart_init@bdrate+2)& (0+255),b
  1691  001050  0E00               	movlw	0
  1692  001052  6F85               	movwf	(uart_init@bdrate+3)& (0+255),b
  1693  001054  ECF5  F006         	call	_uart_init	;wreg free
  1694                           
  1695                           ;app_init.c: 8: RCONbits.IPEN = 1; INTCONbits.GIEH = 1; INTCONbits.GIEL = 1;
  1696  001058  8ED0               	bsf	4048,7,c	;volatile
  1697  00105A  8EF2               	bsf	intcon,7,c	;volatile
  1698  00105C  8CF2               	bsf	intcon,6,c	;volatile
  1699                           
  1700                           ;app_init.c: 9: T0CONbits.TMR0ON = 1;
  1701  00105E  8ED5               	bsf	4053,7,c	;volatile
  1702  001060  0012               	return		;funcret
  1703  001062                     __end_of_system_init:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           indf1	equ	0xFE7
  1712                           fsr1h	equ	0xFE2
  1713                           fsr1l	equ	0xFE1
  1714                           indf2	equ	0xFDF
  1715                           postinc2	equ	0xFDE
  1716                           postdec2	equ	0xFDD
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           status	equ	0xFD8
  1720                           
  1721 ;; *************** function _uart_init *****************
  1722 ;; Defined at:
  1723 ;;		line 11 in file "../../../../../bsp/uart/src/uart_init.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  bdrate          4   34[BANK0 ] unsigned long 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  val             2   27[COMRAM] unsigned short 
  1728 ;;  flush           1   26[COMRAM] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1738 ;;      Params:         0       4       0       0       0       0       0       0       0
  1739 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1741 ;;      Totals:         3       4       0       0       0       0       0       0       0
  1742 ;;Total ram usage:        7 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    6
  1745 ;; This function calls:
  1746 ;;		___lldiv
  1747 ;;		_uart_putc
  1748 ;; This function is called by:
  1749 ;;		_system_init
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           	psect	text8
  1754  000DEA                     __ptext8:
  1755                           	opt stack 0
  1756  000DEA                     _uart_init:
  1757                           	opt stack 23
  1758                           
  1759                           ;uart_init.c: 16: uInt8_t flush;
  1760                           ;uart_init.c: 17: flush = RCREG;
  1761                           
  1762                           ;incstack = 0
  1763  000DEA  CFAE F042          	movff	4014,uart_init@flush	;volatile
  1764                           
  1765                           ;uart_init.c: 18: flush = RCREG;
  1766  000DEE  CFAE F042          	movff	4014,uart_init@flush	;volatile
  1767                           
  1768                           ;uart_init.c: 20: TRISCbits.TRISC6 = 0;
  1769  000DF2  9C94               	bcf	3988,6,c	;volatile
  1770                           
  1771                           ;uart_init.c: 21: TRISCbits.TRISC7 = 1;
  1772  000DF4  8E94               	bsf	3988,7,c	;volatile
  1773                           
  1774                           ;uart_init.c: 24: TXSTA = 0b00100100;
  1775  000DF6  0E24               	movlw	36
  1776  000DF8  6EAC               	movwf	4012,c	;volatile
  1777                           
  1778                           ;uart_init.c: 27: RCSTA = 0b10010000;
  1779  000DFA  0E90               	movlw	144
  1780  000DFC  6EAB               	movwf	4011,c	;volatile
  1781                           
  1782                           ;uart_init.c: 30: BAUDCONbits.BRG16 = 1;
  1783  000DFE  86B8               	bsf	4024,3,c	;volatile
  1784                           
  1785                           ;uart_init.c: 31: uInt16_t val = (32000000 / 4/bdrate-1);
  1786  000E00  0E00               	movlw	0
  1787  000E02  0100               	movlb	0	; () banked
  1788  000E04  6F75               	movwf	___lldiv@dividend& (0+255),b
  1789  000E06  0E12               	movlw	18
  1790  000E08  6F76               	movwf	(___lldiv@dividend+1)& (0+255),b
  1791  000E0A  0E7A               	movlw	122
  1792  000E0C  6F77               	movwf	(___lldiv@dividend+2)& (0+255),b
  1793  000E0E  0E00               	movlw	0
  1794  000E10  6F78               	movwf	(___lldiv@dividend+3)& (0+255),b
  1795  000E12  C082  F079         	movff	uart_init@bdrate,___lldiv@divisor
  1796  000E16  C083  F07A         	movff	uart_init@bdrate+1,___lldiv@divisor+1
  1797  000E1A  C084  F07B         	movff	uart_init@bdrate+2,___lldiv@divisor+2
  1798  000E1E  C085  F07C         	movff	uart_init@bdrate+3,___lldiv@divisor+3
  1799  000E22  EC72  F006         	call	___lldiv	;wreg free
  1800  000E26  0EFF               	movlw	255
  1801  000E28  0100               	movlb	0	; () banked
  1802  000E2A  2575               	addwf	?___lldiv& (0+255),w,b
  1803  000E2C  6E43               	movwf	uart_init@val,c
  1804  000E2E  0EFF               	movlw	255
  1805  000E30  2176               	addwfc	(?___lldiv+1)& (0+255),w,b
  1806  000E32  6E44               	movwf	uart_init@val+1,c
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;uart_init.c: 34: SPBRG = val;
  1810  000E34  C043  FFAF         	movff	uart_init@val,4015	;volatile
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;uart_init.c: 37: PIE1bits.TXIE = 0;
  1814  000E38  989D               	bcf	3997,4,c	;volatile
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;uart_init.c: 40: PIR1bits.RCIF = 0;
  1818  000E3A  9A9E               	bcf	3998,5,c	;volatile
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;uart_init.c: 41: PIE1bits.RCIE = 1;
  1822  000E3C  8A9D               	bsf	3997,5,c	;volatile
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;uart_init.c: 42: IPR1bits.RCIP = 0;
  1826  000E3E  9A9F               	bcf	3999,5,c	;volatile
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;uart_init.c: 45: uart_putc(0x11);
  1830  000E40  0E11               	movlw	17
  1831  000E42  ECE6  F008         	call	_uart_putc
  1832                           
  1833                           ;uart_init.c: 47: buffer_RX.idx_read = 0;
  1834  000E46  0E00               	movlw	0
  1835  000E48  6E24               	movwf	_buffer_RX+35,c
  1836                           
  1837                           ;uart_init.c: 48: buffer_RX.idx_write = 0;
  1838  000E4A  0E00               	movlw	0
  1839  000E4C  6E25               	movwf	_buffer_RX+36,c
  1840                           
  1841                           ;uart_init.c: 49: buffer_RX.nb_elt = 0;
  1842  000E4E  0E00               	movlw	0
  1843  000E50  6E26               	movwf	_buffer_RX+37,c
  1844  000E52  0012               	return		;funcret
  1845  000E54                     __end_of_uart_init:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           prodh	equ	0xFF4
  1849                           prodl	equ	0xFF3
  1850                           intcon	equ	0xFF2
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           indf1	equ	0xFE7
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           indf2	equ	0xFDF
  1857                           postinc2	equ	0xFDE
  1858                           postdec2	equ	0xFDD
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function ___lldiv *****************
  1864 ;; Defined at:
  1865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  dividend        4   21[BANK0 ] unsigned long 
  1868 ;;  divisor         4   25[BANK0 ] unsigned long 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  quotient        4   29[BANK0 ] unsigned long 
  1871 ;;  counter         1   33[BANK0 ] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  4   21[BANK0 ] unsigned long 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1881 ;;      Params:         0       8       0       0       0       0       0       0       0
  1882 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1884 ;;      Totals:         0      13       0       0       0       0       0       0       0
  1885 ;;Total ram usage:       13 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    5
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_uart_init
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text9
  1896  000CE4                     __ptext9:
  1897                           	opt stack 0
  1898  000CE4                     ___lldiv:
  1899                           	opt stack 23
  1900                           
  1901                           ;incstack = 0
  1902  000CE4  0E00               	movlw	0
  1903  000CE6  0100               	movlb	0	; () banked
  1904  000CE8  6F7D               	movwf	___lldiv@quotient& (0+255),b
  1905  000CEA  0E00               	movlw	0
  1906  000CEC  6F7E               	movwf	(___lldiv@quotient+1)& (0+255),b
  1907  000CEE  0E00               	movlw	0
  1908  000CF0  6F7F               	movwf	(___lldiv@quotient+2)& (0+255),b
  1909  000CF2  0E00               	movlw	0
  1910  000CF4  6F80               	movwf	(___lldiv@quotient+3)& (0+255),b
  1911                           
  1912                           ; BSR set to: 0
  1913  000CF6  5179               	movf	___lldiv@divisor& (0+255),w,b
  1914  000CF8  117A               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  1915  000CFA  117B               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  1916  000CFC  117C               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  1917  000CFE  B4D8               	btfsc	status,2,c
  1918  000D00  D02A               	goto	l688
  1919                           
  1920                           ; BSR set to: 0
  1921  000D02  0E01               	movlw	1
  1922  000D04  6F81               	movwf	___lldiv@counter& (0+255),b
  1923  000D06  D006               	goto	l683
  1924  000D08                     
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928  000D08  90D8               	bcf	status,0,c
  1929  000D0A  3779               	rlcf	___lldiv@divisor& (0+255),f,b
  1930  000D0C  377A               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  1931  000D0E  377B               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  1932  000D10  377C               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  1933  000D12  2B81               	incf	___lldiv@counter& (0+255),f,b
  1934  000D14                     l683:
  1935                           
  1936                           ; BSR set to: 0
  1937                           
  1938                           ; BSR set to: 0
  1939  000D14  AF7C               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  1940  000D16  D7F8               	goto	l684
  1941  000D18                     u850:
  1942                           
  1943                           ; BSR set to: 0
  1944                           
  1945                           ; BSR set to: 0
  1946                           
  1947                           ; BSR set to: 0
  1948  000D18  90D8               	bcf	status,0,c
  1949  000D1A  377D               	rlcf	___lldiv@quotient& (0+255),f,b
  1950  000D1C  377E               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  1951  000D1E  377F               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  1952  000D20  3780               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  1953                           
  1954                           ; BSR set to: 0
  1955  000D22  5179               	movf	___lldiv@divisor& (0+255),w,b
  1956  000D24  5D75               	subwf	___lldiv@dividend& (0+255),w,b
  1957  000D26  517A               	movf	(___lldiv@divisor+1)& (0+255),w,b
  1958  000D28  5976               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  1959  000D2A  517B               	movf	(___lldiv@divisor+2)& (0+255),w,b
  1960  000D2C  5977               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  1961  000D2E  517C               	movf	(___lldiv@divisor+3)& (0+255),w,b
  1962  000D30  5978               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  1963  000D32  A0D8               	btfss	status,0,c
  1964  000D34  D009               	goto	l687
  1965                           
  1966                           ; BSR set to: 0
  1967  000D36  5179               	movf	___lldiv@divisor& (0+255),w,b
  1968  000D38  5F75               	subwf	___lldiv@dividend& (0+255),f,b
  1969  000D3A  517A               	movf	(___lldiv@divisor+1)& (0+255),w,b
  1970  000D3C  5B76               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  1971  000D3E  517B               	movf	(___lldiv@divisor+2)& (0+255),w,b
  1972  000D40  5B77               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  1973  000D42  517C               	movf	(___lldiv@divisor+3)& (0+255),w,b
  1974  000D44  5B78               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  1975                           
  1976                           ; BSR set to: 0
  1977  000D46  817D               	bsf	___lldiv@quotient& (0+255),0,b
  1978  000D48                     l687:
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  000D48  90D8               	bcf	status,0,c
  1984  000D4A  337C               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  1985  000D4C  337B               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  1986  000D4E  337A               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  1987  000D50  3379               	rrcf	___lldiv@divisor& (0+255),f,b
  1988                           
  1989                           ; BSR set to: 0
  1990  000D52  2F81               	decfsz	___lldiv@counter& (0+255),f,b
  1991  000D54  D7E1               	goto	u850
  1992  000D56                     l688:
  1993                           
  1994                           ; BSR set to: 0
  1995                           
  1996                           ; BSR set to: 0
  1997  000D56  C07D  F075         	movff	___lldiv@quotient,?___lldiv
  1998  000D5A  C07E  F076         	movff	___lldiv@quotient+1,?___lldiv+1
  1999  000D5E  C07F  F077         	movff	___lldiv@quotient+2,?___lldiv+2
  2000  000D62  C080  F078         	movff	___lldiv@quotient+3,?___lldiv+3
  2001                           
  2002                           ; BSR set to: 0
  2003  000D66  0012               	return		;funcret
  2004  000D68                     __end_of___lldiv:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           prodh	equ	0xFF4
  2008                           prodl	equ	0xFF3
  2009                           intcon	equ	0xFF2
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           indf1	equ	0xFE7
  2013                           fsr1h	equ	0xFE2
  2014                           fsr1l	equ	0xFE1
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _timer0_init *****************
  2023 ;; Defined at:
  2024 ;;		line 9 in file "../../../../../bsp/timer0/src/timer0_init.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  count           2   25[COMRAM] unsigned short 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  val             2   21[BANK0 ] unsigned short 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2038 ;;      Params:         2       0       0       0       0       0       0       0       0
  2039 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2040 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2041 ;;      Totals:         4       2       0       0       0       0       0       0       0
  2042 ;;Total ram usage:        6 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    5
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_system_init
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text10
  2053  001098                     __ptext10:
  2054                           	opt stack 0
  2055  001098                     _timer0_init:
  2056                           	opt stack 24
  2057                           
  2058                           ;timer0_init.c: 12: T0CON = 0x02;
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;incstack = 0
  2062  001098  0E02               	movlw	2
  2063  00109A  6ED5               	movwf	4053,c	;volatile
  2064                           
  2065                           ;timer0_init.c: 13: uInt16_t val = 65535- count;
  2066  00109C  C041  F043         	movff	timer0_init@count,??_timer0_init
  2067  0010A0  C042  F044         	movff	timer0_init@count+1,??_timer0_init+1
  2068  0010A4  1E43               	comf	??_timer0_init,f,c
  2069  0010A6  1E44               	comf	??_timer0_init+1,f,c
  2070  0010A8  4A43               	infsnz	??_timer0_init,f,c
  2071  0010AA  2A44               	incf	??_timer0_init+1,f,c
  2072  0010AC  0EFF               	movlw	255
  2073  0010AE  2443               	addwf	??_timer0_init,w,c
  2074  0010B0  0100               	movlb	0	; () banked
  2075  0010B2  6F75               	movwf	timer0_init@val& (0+255),b
  2076  0010B4  0EFF               	movlw	255
  2077  0010B6  2044               	addwfc	??_timer0_init+1,w,c
  2078  0010B8  6F76               	movwf	(timer0_init@val+1)& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;timer0_init.c: 14: TMR0H = (uInt8_t)(val>>8);
  2082  0010BA  5176               	movf	(timer0_init@val+1)& (0+255),w,b
  2083  0010BC  6ED7               	movwf	4055,c	;volatile
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;timer0_init.c: 15: TMR0L = (uInt8_t)val;
  2087  0010BE  C075  FFD6         	movff	timer0_init@val,4054	;volatile
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;timer0_init.c: 16: OSCCONbits.IDLEN = 1;
  2091  0010C2  8ED3               	bsf	4051,7,c	;volatile
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;timer0_init.c: 18: INTCONbits.TMR0IE = 1;
  2095  0010C4  8AF2               	bsf	intcon,5,c	;volatile
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;timer0_init.c: 19: INTCONbits.TMR0IF = 0;
  2099  0010C6  94F2               	bcf	intcon,2,c	;volatile
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;timer0_init.c: 20: INTCON2bits.TMR0IP = 1;
  2103  0010C8  84F1               	bsf	intcon2,2,c	;volatile
  2104                           
  2105                           ; BSR set to: 0
  2106  0010CA  0012               	return		;funcret
  2107  0010CC                     __end_of_timer0_init:
  2108                           	opt stack 0
  2109                           tblptru	equ	0xFF8
  2110                           prodh	equ	0xFF4
  2111                           prodl	equ	0xFF3
  2112                           intcon	equ	0xFF2
  2113                           intcon2	equ	0xFF1
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           indf1	equ	0xFE7
  2117                           fsr1h	equ	0xFE2
  2118                           fsr1l	equ	0xFE1
  2119                           indf2	equ	0xFDF
  2120                           postinc2	equ	0xFDE
  2121                           postdec2	equ	0xFDD
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _lcd_init *****************
  2127 ;; Defined at:
  2128 ;;		line 4 in file "../../../../../bsp/mlcd/src/lcd_init.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2145 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:        0 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    7
  2149 ;; This function calls:
  2150 ;;		_Delay10KTCYx
  2151 ;;		_Delay10TCYx
  2152 ;;		_Delay1KTCYx
  2153 ;;		_lcd_sendCommand
  2154 ;; This function is called by:
  2155 ;;		_system_init
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text11
  2160  000F5E                     __ptext11:
  2161                           	opt stack 0
  2162  000F5E                     _lcd_init:
  2163                           	opt stack 22
  2164                           
  2165                           ;lcd_init.c: 8: TRISEbits.RE1 = 0;
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;incstack = 0
  2169  000F5E  9296               	bcf	3990,1,c	;volatile
  2170                           
  2171                           ;lcd_init.c: 9: TRISEbits.RE0 = 0;
  2172  000F60  9096               	bcf	3990,0,c	;volatile
  2173                           
  2174                           ;lcd_init.c: 10: TRISD = 0x00;
  2175  000F62  0E00               	movlw	0
  2176  000F64  6E95               	movwf	3989,c	;volatile
  2177                           
  2178                           ;lcd_init.c: 13: Delay10KTCYx(32);
  2179  000F66  0E20               	movlw	32
  2180  000F68  ECB5  F008         	call	_Delay10KTCYx
  2181                           
  2182                           ;lcd_init.c: 14: lcd_sendCommand(0b00110000);
  2183  000F6C  0E30               	movlw	48
  2184  000F6E  ECC0  F008         	call	_lcd_sendCommand
  2185                           
  2186                           ;lcd_init.c: 15: Delay1KTCYx(40);
  2187  000F72  0E28               	movlw	40
  2188  000F74  ECDE  F008         	call	_Delay1KTCYx
  2189                           
  2190                           ;lcd_init.c: 16: lcd_sendCommand(0b00110000);
  2191  000F78  0E30               	movlw	48
  2192  000F7A  ECC0  F008         	call	_lcd_sendCommand
  2193                           
  2194                           ;lcd_init.c: 17: Delay10TCYx(80);
  2195  000F7E  0E50               	movlw	80
  2196  000F80  ECD6  F008         	call	_Delay10TCYx
  2197                           
  2198                           ;lcd_init.c: 18: lcd_sendCommand(0b00110000);
  2199  000F84  0E30               	movlw	48
  2200  000F86  ECC0  F008         	call	_lcd_sendCommand
  2201                           
  2202                           ;lcd_init.c: 21: lcd_sendCommand(0b00111000);
  2203  000F8A  0E38               	movlw	56
  2204  000F8C  ECC0  F008         	call	_lcd_sendCommand
  2205                           
  2206                           ;lcd_init.c: 22: lcd_sendCommand(0b00001100);
  2207  000F90  0E0C               	movlw	12
  2208  000F92  ECC0  F008         	call	_lcd_sendCommand
  2209                           
  2210                           ;lcd_init.c: 23: lcd_sendCommand(0b00000001);
  2211  000F96  0E01               	movlw	1
  2212  000F98  ECC0  F008         	call	_lcd_sendCommand
  2213                           
  2214                           ;lcd_init.c: 24: lcd_sendCommand(0b00000110);
  2215  000F9C  0E06               	movlw	6
  2216  000F9E  ECC0  F008         	call	_lcd_sendCommand
  2217  000FA2  0012               	return		;funcret
  2218  000FA4                     __end_of_lcd_init:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           prodh	equ	0xFF4
  2222                           prodl	equ	0xFF3
  2223                           intcon	equ	0xFF2
  2224                           intcon2	equ	0xFF1
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           indf1	equ	0xFE7
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _Delay10TCYx *****************
  2238 ;; Defined at:
  2239 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10tcyx.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  unit            1    wreg     unsigned char 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  unit            1   25[COMRAM] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2253 ;;      Params:         0       0       0       0       0       0       0       0       0
  2254 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2256 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2257 ;;Total ram usage:        1 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    5
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_lcd_init
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text12
  2268  0011AC                     __ptext12:
  2269                           	opt stack 0
  2270  0011AC                     _Delay10TCYx:
  2271                           	opt stack 23
  2272                           
  2273                           ;incstack = 0
  2274                           ;Delay10TCYx@unit stored from wreg
  2275  0011AC  6E41               	movwf	Delay10TCYx@unit,c
  2276  0011AE                     l520:
  2277  0011AE  0E03               	movlw	3
  2278  0011B0                     u1157:
  2279  0011B0  2EE8               	decfsz	wreg,f,c
  2280  0011B2  D7FE               	bra	u1157
  2281  0011B4  F000               	nop	
  2282  0011B6  2E41               	decfsz	Delay10TCYx@unit,f,c
  2283  0011B8  D7FA               	goto	l520
  2284  0011BA  0012               	return	
  2285  0011BC                     __end_of_Delay10TCYx:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           prodh	equ	0xFF4
  2289                           prodl	equ	0xFF3
  2290                           intcon	equ	0xFF2
  2291                           intcon2	equ	0xFF1
  2292                           postinc0	equ	0xFEE
  2293                           wreg	equ	0xFE8
  2294                           indf1	equ	0xFE7
  2295                           fsr1h	equ	0xFE2
  2296                           fsr1l	equ	0xFE1
  2297                           indf2	equ	0xFDF
  2298                           postinc2	equ	0xFDE
  2299                           postdec2	equ	0xFDD
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _Delay10KTCYx *****************
  2305 ;; Defined at:
  2306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  unit            1    wreg     unsigned char 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  unit            1   26[COMRAM] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0
  2321 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2322 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2323 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2324 ;;Total ram usage:        2 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    5
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_lcd_init
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text13
  2335  00116A                     __ptext13:
  2336                           	opt stack 0
  2337  00116A                     _Delay10KTCYx:
  2338                           	opt stack 23
  2339                           
  2340                           ;incstack = 0
  2341                           ;Delay10KTCYx@unit stored from wreg
  2342  00116A  6E42               	movwf	Delay10KTCYx@unit,c
  2343  00116C                     l513:
  2344  00116C  0E0D               	movlw	13
  2345  00116E  6E41               	movwf	??_Delay10KTCYx& (0+255),c
  2346  001170  0EFC               	movlw	252
  2347  001172                     u1167:
  2348  001172  2EE8               	decfsz	wreg,f,c
  2349  001174  D7FE               	bra	u1167
  2350  001176  2E41               	decfsz	??_Delay10KTCYx& (0+255),f,c
  2351  001178  D7FC               	bra	u1167
  2352  00117A  2E42               	decfsz	Delay10KTCYx@unit,f,c
  2353  00117C  D7F7               	goto	l513
  2354  00117E  0012               	return	
  2355  001180                     __end_of_Delay10KTCYx:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           prodh	equ	0xFF4
  2359                           prodl	equ	0xFF3
  2360                           intcon	equ	0xFF2
  2361                           intcon2	equ	0xFF1
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           indf1	equ	0xFE7
  2365                           fsr1h	equ	0xFE2
  2366                           fsr1l	equ	0xFE1
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _app_init *****************
  2375 ;; Defined at:
  2376 ;;		line 12 in file "app_init.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  chrono          2   25[BANK0 ] PTR struct .
  2379 ;;		 -> NULL(0), 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2391 ;;      Params:         0       2       0       0       0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2394 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2395 ;;Total ram usage:        2 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    9
  2398 ;; This function calls:
  2399 ;;		_lcd_sendString
  2400 ;;		_uart_putc
  2401 ;;		_uart_puts
  2402 ;; This function is called by:
  2403 ;;		_main
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text14
  2408  000E54                     __ptext14:
  2409                           	opt stack 0
  2410  000E54                     _app_init:
  2411                           	opt stack 21
  2412                           
  2413                           ;app_init.c: 14: chrono->btn_reset_flag = 1;
  2414                           
  2415                           ;incstack = 0
  2416  000E54  0100               	movlb	0	; () banked
  2417  000E56  EE20 F002          	lfsr	2,2
  2418  000E5A  5179               	movf	app_init@chrono& (0+255),w,b
  2419  000E5C  26D9               	addwf	fsr2l,f,c
  2420  000E5E  517A               	movf	(app_init@chrono+1)& (0+255),w,b
  2421  000E60  22DA               	addwfc	fsr2h,f,c
  2422  000E62  0E01               	movlw	1
  2423  000E64  6EDF               	movwf	indf2,c
  2424                           
  2425                           ;app_init.c: 15: chrono->btn_stat_stop_flag = 1;
  2426  000E66  EE20 F001          	lfsr	2,1
  2427  000E6A  5179               	movf	app_init@chrono& (0+255),w,b
  2428  000E6C  26D9               	addwf	fsr2l,f,c
  2429  000E6E  517A               	movf	(app_init@chrono+1)& (0+255),w,b
  2430  000E70  22DA               	addwfc	fsr2h,f,c
  2431  000E72  0E01               	movlw	1
  2432  000E74  6EDF               	movwf	indf2,c
  2433                           
  2434                           ;app_init.c: 17: chrono->compteur = 0;
  2435  000E76  EE20 F004          	lfsr	2,4
  2436  000E7A  5179               	movf	app_init@chrono& (0+255),w,b
  2437  000E7C  26D9               	addwf	fsr2l,f,c
  2438  000E7E  517A               	movf	(app_init@chrono+1)& (0+255),w,b
  2439  000E80  22DA               	addwfc	fsr2h,f,c
  2440  000E82  0E00               	movlw	0
  2441  000E84  6EDE               	movwf	postinc2,c
  2442  000E86  0E00               	movlw	0
  2443  000E88  6EDD               	movwf	postdec2,c
  2444                           
  2445                           ;app_init.c: 18: chrono->compteur_flag = 1;
  2446  000E8A  EE20 F003          	lfsr	2,3
  2447  000E8E  5179               	movf	app_init@chrono& (0+255),w,b
  2448  000E90  26D9               	addwf	fsr2l,f,c
  2449  000E92  517A               	movf	(app_init@chrono+1)& (0+255),w,b
  2450  000E94  22DA               	addwfc	fsr2h,f,c
  2451  000E96  0E01               	movlw	1
  2452  000E98  6EDF               	movwf	indf2,c
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;app_init.c: 20: lcd_sendString("00:00");
  2456  000E9A  0E02               	movlw	low (STR_4+1)
  2457  000E9C  6F75               	movwf	lcd_sendString@str& (0+255),b
  2458  000E9E  0E08               	movlw	high (STR_4+1)
  2459  000EA0  6F76               	movwf	(lcd_sendString@str+1)& (0+255),b
  2460  000EA2  EC66  F008         	call	_lcd_sendString	;wreg free
  2461                           
  2462                           ;app_init.c: 21: uart_putc('\r');
  2463  000EA6  0E0D               	movlw	13
  2464  000EA8  ECE6  F008         	call	_uart_putc
  2465                           
  2466                           ;app_init.c: 22: uart_puts("00:00");
  2467  000EAC  0E02               	movlw	low (STR_4+1)
  2468  000EAE  0100               	movlb	0	; () banked
  2469  000EB0  6F75               	movwf	uart_puts@str& (0+255),b
  2470  000EB2  0E08               	movlw	high (STR_4+1)
  2471  000EB4  6F76               	movwf	(uart_puts@str+1)& (0+255),b
  2472  000EB6  EC88  F007         	call	_uart_puts	;wreg free
  2473  000EBA  0012               	return		;funcret
  2474  000EBC                     __end_of_app_init:
  2475                           	opt stack 0
  2476                           tblptru	equ	0xFF8
  2477                           prodh	equ	0xFF4
  2478                           prodl	equ	0xFF3
  2479                           intcon	equ	0xFF2
  2480                           intcon2	equ	0xFF1
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf1	equ	0xFE7
  2484                           fsr1h	equ	0xFE2
  2485                           fsr1l	equ	0xFE1
  2486                           indf2	equ	0xFDF
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function _uart_puts *****************
  2494 ;; Defined at:
  2495 ;;		line 10 in file "../../../../../bsp/uart/src/uart_puts.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  str             2   21[BANK0 ] PTR const unsigned char 
  2498 ;;		 -> STR_5(7), STR_2(6), 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  i               2   23[BANK0 ] int 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2510 ;;      Params:         0       2       0       0       0       0       0       0       0
  2511 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2512 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2513 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2514 ;;Total ram usage:        6 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    6
  2517 ;; This function calls:
  2518 ;;		_uart_putc
  2519 ;; This function is called by:
  2520 ;;		_app_init
  2521 ;;		_task3
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text15
  2526  000F10                     __ptext15:
  2527                           	opt stack 0
  2528  000F10                     _uart_puts:
  2529                           	opt stack 23
  2530                           
  2531                           ;uart_puts.c: 13: int i =0;
  2532                           
  2533                           ;incstack = 0
  2534  000F10  0E00               	movlw	0
  2535  000F12  0100               	movlb	0	; () banked
  2536  000F14  6F78               	movwf	(uart_puts@i+1)& (0+255),b
  2537  000F16  0E00               	movlw	0
  2538  000F18  6F77               	movwf	uart_puts@i& (0+255),b
  2539                           
  2540                           ;uart_puts.c: 14: while(str[i]!='\0'){
  2541  000F1A  D011               	goto	l173
  2542  000F1C                     
  2543                           ; BSR set to: 0
  2544                           ;uart_puts.c: 15: uart_putc(str[i]);
  2545                           
  2546                           ; BSR set to: 0
  2547  000F1C  5177               	movf	uart_puts@i& (0+255),w,b
  2548  000F1E  2575               	addwf	uart_puts@str& (0+255),w,b
  2549  000F20  6E42               	movwf	??_uart_puts& (0+255),c
  2550  000F22  5178               	movf	(uart_puts@i+1)& (0+255),w,b
  2551  000F24  2176               	addwfc	(uart_puts@str+1)& (0+255),w,b
  2552  000F26  6E43               	movwf	(??_uart_puts+1)& (0+255),c
  2553  000F28  C042  FFF6         	movff	??_uart_puts,tblptrl
  2554  000F2C  C043  FFF7         	movff	??_uart_puts+1,tblptrh
  2555  000F30                     	if	0	;tblptru may be non-zero
  2556  000F30                     	endif
  2557  000F30                     	if	0	;tblptru may be non-zero
  2558  000F30                     	endif
  2559  000F30  0008               	tblrd		*
  2560  000F32  50F5               	movf	tablat,w,c
  2561  000F34  ECE6  F008         	call	_uart_putc
  2562                           
  2563                           ;uart_puts.c: 16: i++;
  2564  000F38  0100               	movlb	0	; () banked
  2565  000F3A  4B77               	infsnz	uart_puts@i& (0+255),f,b
  2566  000F3C  2B78               	incf	(uart_puts@i+1)& (0+255),f,b
  2567  000F3E                     l173:
  2568                           
  2569                           ; BSR set to: 0
  2570                           
  2571                           ; BSR set to: 0
  2572  000F3E  5177               	movf	uart_puts@i& (0+255),w,b
  2573  000F40  2575               	addwf	uart_puts@str& (0+255),w,b
  2574  000F42  6E42               	movwf	??_uart_puts& (0+255),c
  2575  000F44  5178               	movf	(uart_puts@i+1)& (0+255),w,b
  2576  000F46  2176               	addwfc	(uart_puts@str+1)& (0+255),w,b
  2577  000F48  6E43               	movwf	(??_uart_puts+1)& (0+255),c
  2578  000F4A  C042  FFF6         	movff	??_uart_puts,tblptrl
  2579  000F4E  C043  FFF7         	movff	??_uart_puts+1,tblptrh
  2580  000F52                     	if	0	;tblptru may be non-zero
  2581  000F52                     	endif
  2582  000F52                     	if	0	;tblptru may be non-zero
  2583  000F52                     	endif
  2584  000F52  0008               	tblrd		*
  2585  000F54  50F5               	movf	tablat,w,c
  2586  000F56  0900               	iorlw	0
  2587  000F58  B4D8               	btfsc	status,2,c
  2588  000F5A  0012               	return	
  2589  000F5C  D7DF               	goto	l174
  2590  000F5E                     __end_of_uart_puts:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           prodh	equ	0xFF4
  2597                           prodl	equ	0xFF3
  2598                           intcon	equ	0xFF2
  2599                           intcon2	equ	0xFF1
  2600                           postinc0	equ	0xFEE
  2601                           wreg	equ	0xFE8
  2602                           indf1	equ	0xFE7
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _uart_putc *****************
  2613 ;; Defined at:
  2614 ;;		line 9 in file "../../../../../bsp/uart/src/uart_putc.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  payload         1    wreg     unsigned char 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  payload         1   25[COMRAM] unsigned char 
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      void 
  2621 ;; Registers used:
  2622 ;;		wreg
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0
  2629 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2631 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2632 ;;Total ram usage:        1 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    5
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_uart_init
  2639 ;;		_uart_puts
  2640 ;;		_app_init
  2641 ;;		_task2
  2642 ;;		_uart_getc
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text16
  2647  0011CC                     __ptext16:
  2648                           	opt stack 0
  2649  0011CC                     _uart_putc:
  2650                           	opt stack 23
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654                           ;uart_putc@payload stored from wreg
  2655  0011CC  6E41               	movwf	uart_putc@payload,c
  2656  0011CE                     
  2657                           ;uart_putc.c: 12: while(!TXSTAbits.TRMT);
  2658  0011CE  A2AC               	btfss	4012,1,c	;volatile
  2659  0011D0  D7FE               	goto	l1782
  2660                           
  2661                           ;uart_putc.c: 13: TXREG=payload;
  2662  0011D2  C041  FFAD         	movff	uart_putc@payload,4013	;volatile
  2663  0011D6  0012               	return		;funcret
  2664  0011D8                     __end_of_uart_putc:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           tblptrh	equ	0xFF7
  2668                           tblptrl	equ	0xFF6
  2669                           tablat	equ	0xFF5
  2670                           prodh	equ	0xFF4
  2671                           prodl	equ	0xFF3
  2672                           intcon	equ	0xFF2
  2673                           intcon2	equ	0xFF1
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           indf1	equ	0xFE7
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _lcd_sendString *****************
  2687 ;; Defined at:
  2688 ;;		line 3 in file "../../../../../bsp/mlcd/src/lcd_sendString.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  str             2   21[BANK0 ] PTR unsigned char 
  2691 ;;		 -> STR_4(7), STR_3(6), STR_1(6), 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2703 ;;      Params:         0       2       0       0       0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2706 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2707 ;;Total ram usage:        2 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    8
  2710 ;; This function calls:
  2711 ;;		_lcd_sendChar
  2712 ;; This function is called by:
  2713 ;;		_app_init
  2714 ;;		_task1
  2715 ;;		_task3
  2716 ;;		_lcd_sendStringXY
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text17
  2721  0010CC                     __ptext17:
  2722                           	opt stack 0
  2723  0010CC                     _lcd_sendString:
  2724                           	opt stack 21
  2725                           
  2726                           ;lcd_sendString.c: 4: while(*str) {
  2727                           
  2728                           ;incstack = 0
  2729  0010CC  D00B               	goto	l297
  2730  0010CE                     
  2731                           ;lcd_sendString.c: 5: lcd_sendChar(*str++);
  2732  0010CE  C075  FFF6         	movff	lcd_sendString@str,tblptrl
  2733  0010D2  C076  FFF7         	movff	lcd_sendString@str+1,tblptrh
  2734  0010D6                     	if	0	;tblptru may be non-zero
  2735  0010D6                     	endif
  2736  0010D6                     	if	0	;tblptru may be non-zero
  2737  0010D6                     	endif
  2738  0010D6  0008               	tblrd		*
  2739  0010D8  50F5               	movf	tablat,w,c
  2740  0010DA  EC31  F008         	call	_lcd_sendChar
  2741  0010DE  0100               	movlb	0	; () banked
  2742  0010E0  4B75               	infsnz	lcd_sendString@str& (0+255),f,b
  2743  0010E2  2B76               	incf	(lcd_sendString@str+1)& (0+255),f,b
  2744  0010E4                     l297:
  2745                           
  2746                           ; BSR set to: 0
  2747  0010E4  C075  FFF6         	movff	lcd_sendString@str,tblptrl
  2748  0010E8  C076  FFF7         	movff	lcd_sendString@str+1,tblptrh
  2749  0010EC                     	if	0	;tblptru may be non-zero
  2750  0010EC                     	endif
  2751  0010EC                     	if	0	;tblptru may be non-zero
  2752  0010EC                     	endif
  2753  0010EC  0008               	tblrd		*
  2754  0010EE  50F5               	movf	tablat,w,c
  2755  0010F0  0900               	iorlw	0
  2756  0010F2  B4D8               	btfsc	status,2,c
  2757  0010F4  0012               	return	
  2758  0010F6  D7EB               	goto	l298
  2759  0010F8                     __end_of_lcd_sendString:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           intcon2	equ	0xFF1
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           indf1	equ	0xFE7
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           indf2	equ	0xFDF
  2775                           postinc2	equ	0xFDE
  2776                           postdec2	equ	0xFDD
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _lcd_sendChar *****************
  2782 ;; Defined at:
  2783 ;;		line 3 in file "../../../../../bsp/mlcd/src/lcd_sendChar.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  data            1    wreg     unsigned char 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  data            1   27[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0
  2798 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2800 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2801 ;;Total ram usage:        1 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    7
  2804 ;; This function calls:
  2805 ;;		_Delay1KTCYx
  2806 ;;		_lcd_sendCommand
  2807 ;; This function is called by:
  2808 ;;		_task1
  2809 ;;		_lcd_sendString
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text18
  2814  001062                     __ptext18:
  2815                           	opt stack 0
  2816  001062                     _lcd_sendChar:
  2817                           	opt stack 21
  2818                           
  2819                           ;incstack = 0
  2820                           ;lcd_sendChar@data stored from wreg
  2821  001062  6E43               	movwf	lcd_sendChar@data,c
  2822                           
  2823                           ;lcd_sendChar.c: 4: if(data == '\r'){
  2824  001064  0E0D               	movlw	13
  2825  001066  1843               	xorwf	lcd_sendChar@data,w,c
  2826  001068  A4D8               	btfss	status,2,c
  2827  00106A  D004               	goto	l277
  2828                           
  2829                           ;lcd_sendChar.c: 5: lcd_sendCommand(0x80);
  2830  00106C  0E80               	movlw	128
  2831  00106E  ECC0  F008         	call	_lcd_sendCommand
  2832                           
  2833                           ;lcd_sendChar.c: 6: }else if(data == '\n'){
  2834  001072  0012               	return	
  2835  001074                     l277:
  2836  001074  0E0A               	movlw	10
  2837  001076  1843               	xorwf	lcd_sendChar@data,w,c
  2838  001078  A4D8               	btfss	status,2,c
  2839  00107A  D004               	goto	l279
  2840                           
  2841                           ;lcd_sendChar.c: 7: lcd_sendCommand(0xC0);
  2842  00107C  0EC0               	movlw	192
  2843  00107E  ECC0  F008         	call	_lcd_sendCommand
  2844                           
  2845                           ;lcd_sendChar.c: 8: }else{
  2846  001082  0012               	return	
  2847  001084                     l279:
  2848                           
  2849                           ;lcd_sendChar.c: 10: LATEbits.LATE0 = 1;
  2850  001084  808D               	bsf	3981,0,c	;volatile
  2851                           
  2852                           ;lcd_sendChar.c: 11: LATD = data;
  2853  001086  C043  FF8C         	movff	lcd_sendChar@data,3980	;volatile
  2854                           
  2855                           ;lcd_sendChar.c: 12: LATEbits.LATE1 = 1; __nop(); LATEbits.LATE1 = 0;;
  2856  00108A  828D               	bsf	3981,1,c	;volatile
  2857  00108C  F000               	nop	
  2858  00108E  928D               	bcf	3981,1,c	;volatile
  2859                           
  2860                           ;lcd_sendChar.c: 13: Delay1KTCYx(16);
  2861  001090  0E10               	movlw	16
  2862  001092  ECDE  F008         	call	_Delay1KTCYx
  2863  001096  0012               	return	
  2864  001098                     __end_of_lcd_sendChar:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon	equ	0xFF2
  2873                           intcon2	equ	0xFF1
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           indf1	equ	0xFE7
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _lcd_sendCommand *****************
  2887 ;; Defined at:
  2888 ;;		line 3 in file "../../../../../bsp/mlcd/src/lcd_sendCommand.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  command         1    wreg     unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  command         1   26[COMRAM] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        1 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    6
  2909 ;; This function calls:
  2910 ;;		_Delay1KTCYx
  2911 ;; This function is called by:
  2912 ;;		_task1
  2913 ;;		_lcd_init
  2914 ;;		_lcd_sendChar
  2915 ;;		_lcd_goto
  2916 ;;		_lcd_sendStringXY
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text19
  2921  001180                     __ptext19:
  2922                           	opt stack 0
  2923  001180                     _lcd_sendCommand:
  2924                           	opt stack 21
  2925                           
  2926                           ;incstack = 0
  2927                           ;lcd_sendCommand@command stored from wreg
  2928  001180  6E42               	movwf	lcd_sendCommand@command,c
  2929                           
  2930                           ;lcd_sendCommand.c: 6: LATEbits.LATE0 = 0;
  2931  001182  908D               	bcf	3981,0,c	;volatile
  2932                           
  2933                           ;lcd_sendCommand.c: 7: LATD = command;
  2934  001184  C042  FF8C         	movff	lcd_sendCommand@command,3980	;volatile
  2935                           
  2936                           ;lcd_sendCommand.c: 8: LATEbits.LATE1 = 1; __nop(); LATEbits.LATE1 = 0;;
  2937  001188  828D               	bsf	3981,1,c	;volatile
  2938  00118A  F000               	nop	
  2939  00118C  928D               	bcf	3981,1,c	;volatile
  2940                           
  2941                           ;lcd_sendCommand.c: 9: Delay1KTCYx(16);
  2942  00118E  0E10               	movlw	16
  2943  001190  ECDE  F008         	call	_Delay1KTCYx
  2944  001194  0012               	return		;funcret
  2945  001196                     __end_of_lcd_sendCommand:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           intcon2	equ	0xFF1
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf1	equ	0xFE7
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _Delay1KTCYx *****************
  2968 ;; Defined at:
  2969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d1ktcyx.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  unit            1    wreg     unsigned char 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  unit            1   25[COMRAM] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0
  2984 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2986 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2987 ;;Total ram usage:        1 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    5
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_lcd_init
  2994 ;;		_lcd_sendChar
  2995 ;;		_lcd_sendCommand
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text20
  3000  0011BC                     __ptext20:
  3001                           	opt stack 0
  3002  0011BC                     _Delay1KTCYx:
  3003                           	opt stack 21
  3004                           
  3005                           ;incstack = 0
  3006                           ;Delay1KTCYx@unit stored from wreg
  3007  0011BC  6E41               	movwf	Delay1KTCYx@unit,c
  3008  0011BE                     l527:
  3009  0011BE  0EC8               	movlw	200
  3010  0011C0                     u1177:
  3011  0011C0  D000               	nop2	
  3012  0011C2  2EE8               	decfsz	wreg,f,c
  3013  0011C4  D7FD               	bra	u1177
  3014  0011C6  2E41               	decfsz	Delay1KTCYx@unit,f,c
  3015  0011C8  D7FA               	goto	l527
  3016  0011CA  0012               	return	
  3017  0011CC                     __end_of_Delay1KTCYx:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           prodh	equ	0xFF4
  3024                           prodl	equ	0xFF3
  3025                           intcon	equ	0xFF2
  3026                           intcon2	equ	0xFF1
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           indf1	equ	0xFE7
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _isr_low *****************
  3040 ;; Defined at:
  3041 ;;		line 52 in file "../../main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3057 ;;      Temps:          0      21       0       0       0       0       0       0       0
  3058 ;;      Totals:         0      21       0       0       0       0       0       0       0
  3059 ;;Total ram usage:       21 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		_uart_isr_process
  3064 ;; This function is called by:
  3065 ;;		Interrupt level 1
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	intcodelo
  3070  000018                     __pintcodelo:
  3071                           	opt stack 0
  3072  000018                     _isr_low:
  3073                           	opt stack 21
  3074                           
  3075                           ;incstack = 0
  3076  000018  8046               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3077  00001A  CFD8 F060          	movff	status,??_isr_low
  3078  00001E  CFE8 F061          	movff	wreg,??_isr_low+1
  3079  000022  CFE0 F062          	movff	bsr,??_isr_low+2
  3080  000026  CFFA F063          	movff	pclath,??_isr_low+3
  3081  00002A  CFFB F064          	movff	pclatu,??_isr_low+4
  3082  00002E  CFE9 F065          	movff	fsr0l,??_isr_low+5
  3083  000032  CFEA F066          	movff	fsr0h,??_isr_low+6
  3084  000036  CFE1 F067          	movff	fsr1l,??_isr_low+7
  3085  00003A  CFE2 F068          	movff	fsr1h,??_isr_low+8
  3086  00003E  CFD9 F069          	movff	fsr2l,??_isr_low+9
  3087  000042  CFDA F06A          	movff	fsr2h,??_isr_low+10
  3088  000046  CFF3 F06B          	movff	prodl,??_isr_low+11
  3089  00004A  CFF4 F06C          	movff	prodh,??_isr_low+12
  3090  00004E  CFF6 F06D          	movff	tblptrl,??_isr_low+13
  3091  000052  CFF7 F06E          	movff	tblptrh,??_isr_low+14
  3092  000056  CFF8 F06F          	movff	tblptru,??_isr_low+15
  3093  00005A  CFF5 F070          	movff	tablat,??_isr_low+16
  3094  00005E  C046  F071         	movff	btemp,??_isr_low+17
  3095  000062  C047  F072         	movff	btemp+1,??_isr_low+18
  3096  000066  C048  F073         	movff	btemp+2,??_isr_low+19
  3097  00006A  C049  F074         	movff	btemp+3,??_isr_low+20
  3098                           
  3099                           ;main.c: 54: uart_isr_process();
  3100  00006E  ECF4  F007         	call	_uart_isr_process	;wreg free
  3101  000072  C074  F049         	movff	??_isr_low+20,btemp+3
  3102  000076  C073  F048         	movff	??_isr_low+19,btemp+2
  3103  00007A  C072  F047         	movff	??_isr_low+18,btemp+1
  3104  00007E  C071  F046         	movff	??_isr_low+17,btemp
  3105  000082  C070  FFF5         	movff	??_isr_low+16,tablat
  3106  000086  C06F  FFF8         	movff	??_isr_low+15,tblptru
  3107  00008A  C06E  FFF7         	movff	??_isr_low+14,tblptrh
  3108  00008E  C06D  FFF6         	movff	??_isr_low+13,tblptrl
  3109  000092  C06C  FFF4         	movff	??_isr_low+12,prodh
  3110  000096  C06B  FFF3         	movff	??_isr_low+11,prodl
  3111  00009A  C06A  FFDA         	movff	??_isr_low+10,fsr2h
  3112  00009E  C069  FFD9         	movff	??_isr_low+9,fsr2l
  3113  0000A2  C068  FFE2         	movff	??_isr_low+8,fsr1h
  3114  0000A6  C067  FFE1         	movff	??_isr_low+7,fsr1l
  3115  0000AA  C066  FFEA         	movff	??_isr_low+6,fsr0h
  3116  0000AE  C065  FFE9         	movff	??_isr_low+5,fsr0l
  3117  0000B2  C064  FFFB         	movff	??_isr_low+4,pclatu
  3118  0000B6  C063  FFFA         	movff	??_isr_low+3,pclath
  3119  0000BA  C062  FFE0         	movff	??_isr_low+2,bsr
  3120  0000BE  C061  FFE8         	movff	??_isr_low+1,wreg
  3121  0000C2  C060  FFD8         	movff	??_isr_low,status
  3122  0000C6  9046               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3123  0000C8  0010               	retfie	
  3124  0000CA                     __end_of_isr_low:
  3125                           	opt stack 0
  3126                           pclatu	equ	0xFFB
  3127                           pclath	equ	0xFFA
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           intcon	equ	0xFF2
  3135                           intcon2	equ	0xFF1
  3136                           postinc0	equ	0xFEE
  3137                           fsr0h	equ	0xFEA
  3138                           fsr0l	equ	0xFE9
  3139                           wreg	equ	0xFE8
  3140                           indf1	equ	0xFE7
  3141                           fsr1h	equ	0xFE2
  3142                           fsr1l	equ	0xFE1
  3143                           bsr	equ	0xFE0
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _uart_isr_process *****************
  3152 ;; Defined at:
  3153 ;;		line 9 in file "../../../../../bsp/uart/src/uart_getc.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  lost            1   24[COMRAM] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0
  3168 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3170 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3171 ;;Total ram usage:        1 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    3
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_isr_low
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text22
  3182  000FE8                     __ptext22:
  3183                           	opt stack 0
  3184  000FE8                     _uart_isr_process:
  3185                           	opt stack 21
  3186                           
  3187                           ;uart_getc.c: 11: uInt8_t lost;
  3188                           ;uart_getc.c: 13: if (PIR1bits.RCIF) {
  3189                           
  3190                           ;incstack = 0
  3191  000FE8  AA9E               	btfss	3998,5,c	;volatile
  3192  000FEA  0012               	return	
  3193                           
  3194                           ;uart_getc.c: 14: PIR1bits.RCIF = 0;
  3195  000FEC  9A9E               	bcf	3998,5,c	;volatile
  3196                           
  3197                           ;uart_getc.c: 15: if(RCSTAbits.OERR){
  3198  000FEE  A2AB               	btfss	4011,1,c	;volatile
  3199  000FF0  D004               	goto	i1l99
  3200                           
  3201                           ;uart_getc.c: 16: RCSTAbits.CREN =0;
  3202  000FF2  98AB               	bcf	4011,4,c	;volatile
  3203                           
  3204                           ;uart_getc.c: 17: __nop();
  3205  000FF4  F000               	nop	
  3206                           
  3207                           ;uart_getc.c: 18: RCSTAbits.CREN =1;
  3208  000FF6  88AB               	bsf	4011,4,c	;volatile
  3209                           
  3210                           ;uart_getc.c: 19: }else if (buffer_RX.nb_elt < 35) {
  3211  000FF8  0012               	return	
  3212  000FFA                     i1l99:
  3213  000FFA  0E23               	movlw	35
  3214  000FFC  6026               	cpfslt	_buffer_RX+37,c
  3215  000FFE  D012               	goto	i1l101
  3216                           
  3217                           ;uart_getc.c: 21: buffer_RX.buffer[buffer_RX.idx_write] = RCREG;
  3218  001000  5025               	movf	_buffer_RX+36,w,c
  3219  001002  0D01               	mullw	1
  3220  001004  0E01               	movlw	low _buffer_RX
  3221  001006  24F3               	addwf	prodl,w,c
  3222  001008  6ED9               	movwf	fsr2l,c
  3223  00100A  0E00               	movlw	high _buffer_RX
  3224  00100C  20F4               	addwfc	prodh,w,c
  3225  00100E  6EDA               	movwf	fsr2h,c
  3226  001010  CFAE FFDF          	movff	4014,indf2	;volatile
  3227                           
  3228                           ;uart_getc.c: 22: buffer_RX.idx_write++;
  3229  001014  2A25               	incf	_buffer_RX+36,f,c
  3230                           
  3231                           ;uart_getc.c: 23: buffer_RX.nb_elt++;
  3232  001016  2A26               	incf	_buffer_RX+37,f,c
  3233                           
  3234                           ;uart_getc.c: 25: if (buffer_RX.idx_write >= 35) {
  3235  001018  0E22               	movlw	34
  3236  00101A  6425               	cpfsgt	_buffer_RX+36,c
  3237  00101C  0012               	return	
  3238                           
  3239                           ;uart_getc.c: 26: buffer_RX.idx_write = 0;
  3240  00101E  0E00               	movlw	0
  3241  001020  6E25               	movwf	_buffer_RX+36,c
  3242                           
  3243                           ;uart_getc.c: 27: }
  3244                           ;uart_getc.c: 33: } else {
  3245  001022  0012               	return	
  3246  001024                     i1l101:
  3247                           
  3248                           ;uart_getc.c: 34: lost = RCREG;
  3249  001024  CFAE F040          	movff	4014,uart_isr_process@lost	;volatile
  3250  001028  0012               	return	
  3251  00102A                     __end_of_uart_isr_process:
  3252                           	opt stack 0
  3253                           pclatu	equ	0xFFB
  3254                           pclath	equ	0xFFA
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           intcon2	equ	0xFF1
  3263                           postinc0	equ	0xFEE
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           indf1	equ	0xFE7
  3268                           fsr1h	equ	0xFE2
  3269                           fsr1l	equ	0xFE1
  3270                           bsr	equ	0xFE0
  3271                           indf2	equ	0xFDF
  3272                           postinc2	equ	0xFDE
  3273                           postdec2	equ	0xFDD
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _high_isr *****************
  3279 ;; Defined at:
  3280 ;;		line 47 in file "../../main.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3294 ;;      Params:         0       0       0       0       0       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3296 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3297 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3298 ;;Total ram usage:       18 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    2
  3301 ;; This function calls:
  3302 ;;		_timer0_isr_process
  3303 ;; This function is called by:
  3304 ;;		Interrupt level 2
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	intcode
  3309  000008                     __pintcode:
  3310                           	opt stack 0
  3311  000008                     _high_isr:
  3312                           	opt stack 21
  3313                           
  3314                           ;incstack = 0
  3315  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3316  00000A  EDDF  F005         	call	int_func,f	;refresh shadow registers
  3317                           pclatu	equ	0xFFB
  3318                           pclath	equ	0xFFA
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           prodh	equ	0xFF4
  3324                           prodl	equ	0xFF3
  3325                           intcon	equ	0xFF2
  3326                           intcon2	equ	0xFF1
  3327                           postinc0	equ	0xFEE
  3328                           fsr0h	equ	0xFEA
  3329                           fsr0l	equ	0xFE9
  3330                           wreg	equ	0xFE8
  3331                           indf1	equ	0xFE7
  3332                           fsr1h	equ	0xFE2
  3333                           fsr1l	equ	0xFE1
  3334                           bsr	equ	0xFE0
  3335                           indf2	equ	0xFDF
  3336                           postinc2	equ	0xFDE
  3337                           postdec2	equ	0xFDD
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342                           	psect	intcode_body
  3343  000BBE                     __pintcode_body:
  3344                           	opt stack 21
  3345  000BBE                     int_func:
  3346                           	opt stack 21
  3347  000BBE  0006               	pop		; remove dummy address from shadow register refresh
  3348  000BC0  CFFA F02E          	movff	pclath,??_high_isr
  3349  000BC4  CFFB F02F          	movff	pclatu,??_high_isr+1
  3350  000BC8  CFE9 F030          	movff	fsr0l,??_high_isr+2
  3351  000BCC  CFEA F031          	movff	fsr0h,??_high_isr+3
  3352  000BD0  CFE1 F032          	movff	fsr1l,??_high_isr+4
  3353  000BD4  CFE2 F033          	movff	fsr1h,??_high_isr+5
  3354  000BD8  CFD9 F034          	movff	fsr2l,??_high_isr+6
  3355  000BDC  CFDA F035          	movff	fsr2h,??_high_isr+7
  3356  000BE0  CFF3 F036          	movff	prodl,??_high_isr+8
  3357  000BE4  CFF4 F037          	movff	prodh,??_high_isr+9
  3358  000BE8  CFF6 F038          	movff	tblptrl,??_high_isr+10
  3359  000BEC  CFF7 F039          	movff	tblptrh,??_high_isr+11
  3360  000BF0  CFF8 F03A          	movff	tblptru,??_high_isr+12
  3361  000BF4  CFF5 F03B          	movff	tablat,??_high_isr+13
  3362  000BF8  C046  F03C         	movff	btemp,??_high_isr+14
  3363  000BFC  C047  F03D         	movff	btemp+1,??_high_isr+15
  3364  000C00  C048  F03E         	movff	btemp+2,??_high_isr+16
  3365  000C04  C049  F03F         	movff	btemp+3,??_high_isr+17
  3366                           
  3367                           ;main.c: 49: timer0_isr_process();
  3368  000C08  ECCB  F008         	call	_timer0_isr_process	;wreg free
  3369  000C0C  C03F  F049         	movff	??_high_isr+17,btemp+3
  3370  000C10  C03E  F048         	movff	??_high_isr+16,btemp+2
  3371  000C14  C03D  F047         	movff	??_high_isr+15,btemp+1
  3372  000C18  C03C  F046         	movff	??_high_isr+14,btemp
  3373  000C1C  C03B  FFF5         	movff	??_high_isr+13,tablat
  3374  000C20  C03A  FFF8         	movff	??_high_isr+12,tblptru
  3375  000C24  C039  FFF7         	movff	??_high_isr+11,tblptrh
  3376  000C28  C038  FFF6         	movff	??_high_isr+10,tblptrl
  3377  000C2C  C037  FFF4         	movff	??_high_isr+9,prodh
  3378  000C30  C036  FFF3         	movff	??_high_isr+8,prodl
  3379  000C34  C035  FFDA         	movff	??_high_isr+7,fsr2h
  3380  000C38  C034  FFD9         	movff	??_high_isr+6,fsr2l
  3381  000C3C  C033  FFE2         	movff	??_high_isr+5,fsr1h
  3382  000C40  C032  FFE1         	movff	??_high_isr+4,fsr1l
  3383  000C44  C031  FFEA         	movff	??_high_isr+3,fsr0h
  3384  000C48  C030  FFE9         	movff	??_high_isr+2,fsr0l
  3385  000C4C  C02F  FFFB         	movff	??_high_isr+1,pclatu
  3386  000C50  C02E  FFFA         	movff	??_high_isr,pclath
  3387  000C54  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3388  000C56  0011               	retfie		f
  3389  000C58                     __end_of_high_isr:
  3390                           	opt stack 0
  3391                           pclatu	equ	0xFFB
  3392                           pclath	equ	0xFFA
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           intcon2	equ	0xFF1
  3401                           postinc0	equ	0xFEE
  3402                           fsr0h	equ	0xFEA
  3403                           fsr0l	equ	0xFE9
  3404                           wreg	equ	0xFE8
  3405                           indf1	equ	0xFE7
  3406                           fsr1h	equ	0xFE2
  3407                           fsr1l	equ	0xFE1
  3408                           bsr	equ	0xFE0
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _timer0_isr_process *****************
  3417 ;; Defined at:
  3418 ;;		line 3 in file "../../../../../bsp/timer0/src/timer0_isr_process.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3432 ;;      Params:         0       0       0       0       0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3434 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3435 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3436 ;;Total ram usage:        0 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    1
  3439 ;; This function calls:
  3440 ;;		_timer0_reload
  3441 ;; This function is called by:
  3442 ;;		_high_isr
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text24
  3447  001196                     __ptext24:
  3448                           	opt stack 0
  3449  001196                     _timer0_isr_process:
  3450                           	opt stack 21
  3451                           
  3452                           ;timer0_isr_process.c: 4: if (INTCONbits.TMR0IF) {
  3453                           
  3454                           ;incstack = 0
  3455  001196  A4F2               	btfss	intcon,2,c	;volatile
  3456  001198  0012               	return	
  3457                           
  3458                           ;timer0_isr_process.c: 5: INTCONbits.TMR0IF = 0;
  3459  00119A  94F2               	bcf	intcon,2,c	;volatile
  3460                           
  3461                           ;timer0_isr_process.c: 6: timer0_reload(20000);
  3462  00119C  0E4E               	movlw	78
  3463  00119E  6E29               	movwf	timer0_reload@count+1,c
  3464  0011A0  0E20               	movlw	32
  3465  0011A2  6E28               	movwf	timer0_reload@count,c
  3466  0011A4  EC90  F008         	call	_timer0_reload	;wreg free
  3467                           
  3468                           ;timer0_isr_process.c: 7: TICK = 1;
  3469  0011A8  8045               	bsf	_TICK/(0+8),_TICK& (0+7),c
  3470  0011AA  0012               	return	
  3471  0011AC                     __end_of_timer0_isr_process:
  3472                           	opt stack 0
  3473                           pclatu	equ	0xFFB
  3474                           pclath	equ	0xFFA
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           intcon2	equ	0xFF1
  3483                           postinc0	equ	0xFEE
  3484                           fsr0h	equ	0xFEA
  3485                           fsr0l	equ	0xFE9
  3486                           wreg	equ	0xFE8
  3487                           indf1	equ	0xFE7
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           bsr	equ	0xFE0
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _timer0_reload *****************
  3499 ;; Defined at:
  3500 ;;		line 9 in file "../../../../../bsp/timer0/src/timer0_reload.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  count           2    0[COMRAM] unsigned short 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  val             2    4[COMRAM] unsigned short 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3514 ;;      Params:         2       0       0       0       0       0       0       0       0
  3515 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3516 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3517 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3518 ;;Total ram usage:        6 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_timer0_isr_process
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text25
  3528  001120                     __ptext25:
  3529                           	opt stack 0
  3530  001120                     _timer0_reload:
  3531                           	opt stack 21
  3532                           
  3533                           ;timer0_reload.c: 12: uInt16_t val = 65535- count;
  3534                           
  3535                           ;incstack = 0
  3536  001120  C028  F02A         	movff	timer0_reload@count,??_timer0_reload
  3537  001124  C029  F02B         	movff	timer0_reload@count+1,??_timer0_reload+1
  3538  001128  1E2A               	comf	??_timer0_reload,f,c
  3539  00112A  1E2B               	comf	??_timer0_reload+1,f,c
  3540  00112C  4A2A               	infsnz	??_timer0_reload,f,c
  3541  00112E  2A2B               	incf	??_timer0_reload+1,f,c
  3542  001130  0EFF               	movlw	255
  3543  001132  242A               	addwf	??_timer0_reload,w,c
  3544  001134  6E2C               	movwf	timer0_reload@val,c
  3545  001136  0EFF               	movlw	255
  3546  001138  202B               	addwfc	??_timer0_reload+1,w,c
  3547  00113A  6E2D               	movwf	timer0_reload@val+1,c
  3548                           
  3549                           ;timer0_reload.c: 13: TMR0H = (uInt8_t)(val>>8);
  3550  00113C  502D               	movf	timer0_reload@val+1,w,c
  3551  00113E  6ED7               	movwf	4055,c	;volatile
  3552                           
  3553                           ;timer0_reload.c: 14: TMR0L = (uInt8_t)val;
  3554  001140  C02C  FFD6         	movff	timer0_reload@val,4054	;volatile
  3555  001144  0012               	return		;funcret
  3556  001146                     __end_of_timer0_reload:
  3557                           	opt stack 0
  3558                           pclatu	equ	0xFFB
  3559                           pclath	equ	0xFFA
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           intcon2	equ	0xFF1
  3568                           postinc0	equ	0xFEE
  3569                           fsr0h	equ	0xFEA
  3570                           fsr0l	equ	0xFE9
  3571                           wreg	equ	0xFE8
  3572                           indf1	equ	0xFE7
  3573                           fsr1h	equ	0xFE2
  3574                           fsr1l	equ	0xFE1
  3575                           bsr	equ	0xFE0
  3576                           indf2	equ	0xFDF
  3577                           postinc2	equ	0xFDE
  3578                           postdec2	equ	0xFDD
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           pclatu	equ	0xFFB
  3583                           pclath	equ	0xFFA
  3584                           tblptru	equ	0xFF8
  3585                           tblptrh	equ	0xFF7
  3586                           tblptrl	equ	0xFF6
  3587                           tablat	equ	0xFF5
  3588                           prodh	equ	0xFF4
  3589                           prodl	equ	0xFF3
  3590                           intcon	equ	0xFF2
  3591                           intcon2	equ	0xFF1
  3592                           postinc0	equ	0xFEE
  3593                           fsr0h	equ	0xFEA
  3594                           fsr0l	equ	0xFE9
  3595                           wreg	equ	0xFE8
  3596                           indf1	equ	0xFE7
  3597                           fsr1h	equ	0xFE2
  3598                           fsr1l	equ	0xFE1
  3599                           bsr	equ	0xFE0
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607                           	psect	rparam
  3608  0000                     pclatu	equ	0xFFB
  3609                           pclath	equ	0xFFA
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           prodh	equ	0xFF4
  3615                           prodl	equ	0xFF3
  3616                           intcon	equ	0xFF2
  3617                           intcon2	equ	0xFF1
  3618                           postinc0	equ	0xFEE
  3619                           fsr0h	equ	0xFEA
  3620                           fsr0l	equ	0xFE9
  3621                           wreg	equ	0xFE8
  3622                           indf1	equ	0xFE7
  3623                           fsr1h	equ	0xFE2
  3624                           fsr1l	equ	0xFE1
  3625                           bsr	equ	0xFE0
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633                           	psect	temp
  3634  000046                     btemp:
  3635                           	opt stack 0
  3636  000046                     	ds	1
  3637  0000                     int$flags	set	btemp
  3638  0000                     wtemp6	set	btemp+1
  3639                           pclatu	equ	0xFFB
  3640                           pclath	equ	0xFFA
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           intcon2	equ	0xFF1
  3649                           postinc0	equ	0xFEE
  3650                           fsr0h	equ	0xFEA
  3651                           fsr0l	equ	0xFE9
  3652                           wreg	equ	0xFE8
  3653                           indf1	equ	0xFE7
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           bsr	equ	0xFE0
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           fsr2h	equ	0xFDA
  3661                           fsr2l	equ	0xFD9
  3662                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    0
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      69
    BANK0           160     39      42
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_sendString@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_3(CODE[6]), STR_1(CODE[6]), 

    task3@chrono	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    task2@chrono	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    task1@chrono	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    app_init@chrono	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart_puts@str	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[7]), STR_2(CODE[6]), 

    main@chrono	PTR struct . size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _task3->_uart_puts
    _task2->___lwdiv
    _task1->___lwdiv
    _task1->_lcd_sendChar
    _system_init->_timer0_init
    _system_init->_uart_init
    _uart_init->_uart_putc
    _lcd_init->_Delay10KTCYx
    _lcd_init->_lcd_sendCommand
    _app_init->_uart_puts
    _uart_puts->_uart_putc
    _lcd_sendString->_lcd_sendChar
    _lcd_sendChar->_lcd_sendCommand
    _lcd_sendCommand->_Delay1KTCYx

Critical Paths under _isr_low in COMRAM

    _isr_low->_uart_isr_process

Critical Paths under _high_isr in COMRAM

    _timer0_isr_process->_timer0_reload

Critical Paths under _main in BANK0

    _task3->_uart_puts
    _task2->___lwdiv
    _task2->___wmul
    _task1->___lwdiv
    _task1->___lwmod
    _task1->___wmul
    _system_init->_uart_init
    _uart_init->___lldiv
    _app_init->_uart_puts

Critical Paths under _isr_low in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr_low in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_low in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_low in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_low in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_low in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr_low in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr_low in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10232
                                             38 BANK0      1     1      0
                           _app_init
                        _system_init
                              _task1
                              _task2
                              _task3
 ---------------------------------------------------------------------------------
 (1) _task3                                                2     0      2    1197
                                             25 BANK0      2     0      2
                     _lcd_sendString
                          _uart_puts
 ---------------------------------------------------------------------------------
 (1) _task2                                               11     9      2    2742
                                             25 BANK0     11     9      2
                            ___lwdiv
                             ___wmul
                          _uart_putc
 ---------------------------------------------------------------------------------
 (1) _task1                                               11     9      2    4160
                                             25 BANK0     11     9      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                       _lcd_sendChar
                    _lcd_sendCommand
                     _lcd_sendString
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                             25 COMRAM     2     2      0
                                             21 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             25 COMRAM     1     1      0
                                             21 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1681
                                             25 COMRAM     3     3      0
                                             21 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     936
                           _lcd_init
                        _timer0_init
                          _uart_init
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            7     3      4     613
                                             26 COMRAM     3     3      0
                                             34 BANK0      4     0      4
                            ___lldiv
                          _uart_putc
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     421
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                          6     4      2     186
                                             25 COMRAM     4     2      2
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0     137
                       _Delay10KTCYx
                        _Delay10TCYx
                        _Delay1KTCYx
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (3) _Delay10TCYx                                          1     1      0      22
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                             25 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _app_init                                             2     0      2    1197
                                             25 BANK0      2     0      2
                     _lcd_sendString
                          _uart_putc
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            6     4      2     341
                                             26 COMRAM     2     2      0
                                             21 BANK0      4     2      2
                          _uart_putc
 ---------------------------------------------------------------------------------
 (3) _uart_putc                                            1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_sendString                                       2     0      2     611
                                             21 BANK0      2     0      2
                       _lcd_sendChar
 ---------------------------------------------------------------------------------
 (3) _lcd_sendChar                                         1     1      0     186
                                             27 COMRAM     1     1      0
                        _Delay1KTCYx
                    _lcd_sendCommand
 ---------------------------------------------------------------------------------
 (4) _lcd_sendCommand                                      1     1      0      62
                                             26 COMRAM     1     1      0
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (5) _Delay1KTCYx                                          1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr_low                                             21    21      0       0
                                              0 BANK0     21    21      0
                   _uart_isr_process
 ---------------------------------------------------------------------------------
 (7) _uart_isr_process                                     1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            18    18      0     143
                                              6 COMRAM    18    18      0
                 _timer0_isr_process
 ---------------------------------------------------------------------------------
 (9) _timer0_isr_process                                   0     0      0     143
                      _timer0_reload
 ---------------------------------------------------------------------------------
 (10) _timer0_reload                                       6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _app_init
     _lcd_sendString
       _lcd_sendChar
         _Delay1KTCYx
         _lcd_sendCommand
           _Delay1KTCYx
     _uart_putc
     _uart_puts
       _uart_putc
   _system_init
     _lcd_init
       _Delay10KTCYx
       _Delay10TCYx
       _Delay1KTCYx
       _lcd_sendCommand
         _Delay1KTCYx
     _timer0_init
     _uart_init
       ___lldiv
       _uart_putc
   _task1
     ___lwdiv
     ___lwmod
     ___wmul
     _lcd_sendChar
       _Delay1KTCYx
       _lcd_sendCommand
         _Delay1KTCYx
     _lcd_sendCommand
       _Delay1KTCYx
     _lcd_sendString
       _lcd_sendChar
         _Delay1KTCYx
         _lcd_sendCommand
           _Delay1KTCYx
   _task2
     ___lwdiv
     ___wmul
     _uart_putc
   _task3
     _lcd_sendString
       _lcd_sendChar
         _Delay1KTCYx
         _lcd_sendCommand
           _Delay1KTCYx
     _uart_puts
       _uart_putc

 _isr_low (ROOT)
   _uart_isr_process

 _high_isr (ROOT)
   _timer0_isr_process
     _timer0_reload

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      2A       5       26.3%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     1D      45       1       73.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6F      20        0.0%
DATA                 0      0      6F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 13 04:08:15 2020

              ?_lcd_sendChar 0028                           l31 0C6C                           l33 0CBA  
                         l34 0C74                           l35 0CD0                           l36 0C9E  
                         l37 0CAC                           bsr 000FE0          ___wmul@multiplicand 0077  
        __end_of_system_init 1062              ?_lcd_sendString 0075             ?_lcd_sendCommand 0028  
                        l223 0820                          l225 0866                          l228 08FE  
                        l173 0F3E                          l237 0D80                          l174 0F1C  
                        l520 11AE                          l513 116C                          l277 1074  
                        l527 11BE                          l279 1084                          l297 10E4  
                        l298 10CE                          l740 0EFC                          l741 0F06  
                        l750 0FD4                          l751 0FDE                          l736 0EDC  
                        l737 0ED4                          l746 0FBC                          l683 0D14  
                        l747 0FB4                          l684 0D08                          l687 0D48  
                        l688 0D56                          u550 0FC0                          u900 0EE0  
                        u850 0D18                 __CFG_BOR$OFF 000000                          prod 000FF3  
                        wreg 000FE8                 __CFG_WDT$OFF 000000                         l1782 11CE  
                       l1970 08FE                         STR_1 0802                         STR_2 0802  
                       STR_3 0802                         STR_4 0801                         STR_5 0801  
                       u1080 0C7C                         u1157 11B0                         u1086 0C7E  
                       u1167 1172                         _LATD 000F8C                         u1177 11C0  
                       i1l99 0FFA                         _TICK 0228                         _main 0C58  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0046  
                       prodh 000FF4                         prodl 000FF3                         start 00CA  
             ??_lcd_sendChar 0043                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                _Delay10TCYx 11AC                  _Delay1KTCYx 11BC                __CFG_PLLDIV$2 000000  
                      ?_main 0028              __end_of___lldiv 0D68                        _T0CON 000FD5  
            __end_of___lwdiv 0F10                        i1l101 1024              __end_of___lwmod 0FE8  
                      _RCREG 000FAE                        _RCSTA 000FAB                        _TMR0H 000FD7  
                      _TMR0L 000FD6                        _SPBRG 000FAF                        _TRISD 000F95  
                      _TXREG 000FAD        __size_of_Delay10KTCYx 0016                        _TXSTA 000FAC  
                      _index 0027                        _task1 080A                        _task2 0A54  
                      _task3 0D68              __end_of_isr_low 00CA               __pbitbssCOMRAM 0228  
                      pclath 000FFA                        tablat 000FF5                        status 000FD8  
                      wtemp6 0047  __size_of_timer0_isr_process 0016              __initialization 1146  
                _system_init 102A                 __end_of_main 0CE4                 _Delay10KTCYx 116A  
         timer0_reload@count 0028                       ??_main 0086                __activetblptr 000002  
                     _ADCON1 000FC1                       ?_task1 0079                       ?_task2 0079  
                     ?_task3 0079       lcd_sendCommand@command 0042             __end_of_app_init 0EBC  
           __end_of_lcd_init 0FA4             __end_of_high_isr 0C58             lcd_sendChar@data 0043  
                     ___wmul 10F8                    ??___lldiv 0041                 ?_timer0_init 0041  
                  ??___lwdiv 0041                    ??___lwmod 0041                       clear_0 1156  
                     task1@a 0083                       task1@b 0082                       task1@c 0081  
                     task1@d 0080                       task2@a 0083                       task2@b 0082  
                     task2@c 0081                       task2@d 0080                    ??_isr_low 0060  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8         __end_of_lcd_sendChar 1098            ?_uart_isr_process 0028  
                 __accesstop 0060      __end_of__initialization 115C           ??_uart_isr_process 0040  
              ___rparam_used 000001               __pcstackCOMRAM 0028             ??_lcd_sendString 0044  
                task1@chrono 0079                __end_of_task1 0A54                __end_of_task2 0BBE  
              __end_of_task3 0DEA                  task2@chrono 0079                  task3@chrono 0079  
      __end_of_timer0_reload 1146                      ??_task1 007B                      ??_task2 007B  
                    ??_task3 0044                   __pbssBANK0 0087                 ?_Delay10TCYx 0028  
                    ?___wmul 0075                 ?_Delay1KTCYx 0028           __size_of_uart_init 006A  
         __size_of_uart_putc 000C           __size_of_uart_puts 004E                    ?_app_init 0079  
   __size_of_lcd_sendCommand 0016                    ?_lcd_init 0028                    ?_high_isr 0028  
                    __Hparam 0000                      __Lparam 0000                 ?_system_init 0028  
                    ___lldiv 0CE4              __size_of___wmul 0028                      ___lwdiv 0EBC  
                    ___lwmod 0FA4                 __psmallconst 0800                      __pcinit 1146  
            Delay10TCYx@unit 0041                      __ramtop 0800         __size_of_timer0_init 0034  
                    __ptext0 0C58                      __ptext1 0D68                      __ptext2 0A54  
                    __ptext3 080A                      __ptext4 10F8                      __ptext5 0FA4  
                    __ptext6 0EBC                      __ptext7 102A                      __ptext8 0DEA  
                    __ptext9 0CE4        __size_of_lcd_sendChar 0036                    _T0CONbits 000FD5  
                    _isr_low 0018                   ??_app_init 0044                   ??_lcd_init 0043  
       uart_isr_process@lost 0040                   ??_high_isr 002E               __pintcode_body 0BBE  
       end_of_initialization 115C   __end_of_timer0_isr_process 11AC                __Lmediumconst 0000  
                    int_func 0BBE            __end_of_uart_init 0E54              ___lldiv@divisor 0079  
          __end_of_uart_putc 11D8            __end_of_uart_puts 0F5E              ___lldiv@counter 0081  
                  _RCSTAbits 000FAB                 _lcd_sendChar 1062                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _PORTBbits 000F81  
           timer0_init@count 0041                    _TRISAbits 000F92                    _TRISBbits 000F93  
                  _TRISCbits 000F94                    _TRISEbits 000F96                   main@chrono 0087  
                  _TXSTAbits 000FAC            ??_lcd_sendCommand 0042             timer0_reload@val 002C  
             __end_of___wmul 1120    __size_of_uart_isr_process 0042                  _BAUDCONbits 000FB8  
       __size_of_Delay10TCYx 0010         __size_of_Delay1KTCYx 0010          start_initialization 1146  
                   ??___wmul 0041         __size_of_system_init 0038               timer0_init@val 0075  
                __pbssCOMRAM 0001                __pcstackBANK0 0060            lcd_sendString@str 0075  
            Delay1KTCYx@unit 0041            __size_of_app_init 0068            __size_of_lcd_init 0046  
          __size_of_high_isr 0C50             ___lwdiv@dividend 0075                    __pintcode 0008  
                   ?___lldiv 0075       __size_of_timer0_reload 0026                ?_Delay10KTCYx 0028  
                   ?___lwdiv 0075                     ?___lwmod 0075                  __pintcodelo 0018  
                  _buffer_RX 0001                  __smallconst 0800                     ?_isr_low 0028  
    __size_of_lcd_sendString 002C             ___lwdiv@quotient 0042               __size_of_task1 024A  
             __size_of_task2 016A               __size_of_task3 0082               ___wmul@product 0041  
                   _LATAbits 000F89                     _LATEbits 000F8D                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D              uart_init@bdrate 0082                     _PIR1bits 000F9E  
                   _RCONbits 000FD0               ??_Delay10KTCYx 0041                    _uart_init 0DEA  
              ??_timer0_init 0043                    _uart_putc 11CC                    _uart_puts 0F10  
         _timer0_isr_process 1196             _uart_isr_process 0FE8                   uart_puts@i 0077  
          ___wmul@multiplier 0075                 _scheduler_ct 0089          ?_timer0_isr_process 0028  
           Delay10KTCYx@unit 0042              _lcd_sendCommand 1180                _timer0_reload 1120  
                _INTCON2bits 000FF1         ??_timer0_isr_process 002E                     __Hrparam 0000  
                   __Lrparam 0000                   ?_uart_init 0082                   ?_uart_putc 0028  
                 ?_uart_puts 0075             __size_of___lldiv 0084               app_init@chrono 0079  
           __size_of___lwdiv 0054             __size_of___lwmod 0044          __end_of_timer0_init 10CC  
            ___lwdiv@divisor 0077             __size_of_isr_low 00B2              ___lwdiv@counter 0041  
             ?_timer0_reload 0028                     __ptext10 1098                     __ptext11 0F5E  
                   __ptext20 11BC                     __ptext12 11AC                     __ptext13 116A  
                   __ptext22 0FE8                     __ptext14 0E54                     __ptext15 0F10  
                   __ptext24 1196                     __ptext16 11CC                     __ptext25 1120  
                   __ptext17 10CC                     __ptext18 1062                     __ptext19 1180  
                   _app_init 0E54                     _lcd_init 0F5E                     _high_isr 0008  
           uart_putc@payload 0041                __size_of_main 008C               uart_init@flush 0042  
              ??_Delay10TCYx 0041                     int$flags 0046                ??_Delay1KTCYx 0041  
    __end_of_lcd_sendCommand 1196        __CFG_CPUDIV$OSC2_PLL3 000000                   _INTCONbits 000FF2  
             _lcd_sendString 10CC         __end_of_Delay10KTCYx 1180                     intlevel1 0000  
                   intlevel2 0000             ___lwmod@dividend 0075             ___lldiv@dividend 0075  
                 _OSCCONbits 000FD3                ??_system_init 0045                  ??_uart_init 0042  
                ??_uart_putc 0041                  ??_uart_puts 0042                  _timer0_init 1098  
     __end_of_lcd_sendString 10F8          __end_of_Delay10TCYx 11BC             ___lldiv@quotient 007D  
            ___lwmod@divisor 0077          __end_of_Delay1KTCYx 11CC              ??_timer0_reload 002A  
            ___lwmod@counter 0041                 uart_init@val 0043           __CFG_FOSC$HSPLL_HS 000000  
   __end_of_uart_isr_process 102A                 uart_puts@str 0075  
